{"version":3,"names":[],"mappings":"","sources":["aria.js"],"sourcesContent":["/*! aria - v0.1.0 - MIT license - 2018-3-12 */\n(function (globalVariable) {\n    \"use strict\";\n\n/**\n * @file    A library for handling WAI-ARIA attributes, the role attribute and\n *          other accessibility functions.\n * @author  James \"Skateside\" Long <sk85ide@hotmail.com>\n * @version 0.1.0\n */\n\n\n    /**\n     * Namespace for the WAI-ARIA functions.\n     *\n     * @namespace\n     */\n    let ARIA = {};\n\n    /**\n     * The current version. This is written in Semantic Versioning (SemVer).\n     *\n     * @memberof ARIA\n     * @constant\n     * @type     {String}\n     */\n    let VERSION = \"0.1.0\";\n\n    let previousAria = globalVariable.ARIA;\n    let hiddenDescriptor = {\n        configurable: true,\n        enumerable: false,\n        writable: true\n    };\n\n    /**\n     * @memberof ARIA\n     * @param    {Object} methods\n     *           Methods to publicly add to the {@link ARIA} namespace.\n     */\n    function extend(methods) {\n        Object.assign(ARIA, methods);\n    }\n\n    /**\n     * @memberof ARIA\n     * @param    {Object} methods\n     *           Methods to privately add to the {@link ARIA} namespace.\n     */\n    function extendHidden(methods) {\n\n        Object\n            .entries(methods)\n            .forEach(function ([name, value]) {\n\n                Object.defineProperty(\n                    ARIA,\n                    name,\n                    Object.assign({value}, hiddenDescriptor)\n                );\n\n            });\n\n    }\n\n    Object.defineProperty(ARIA, \"VERSION\", {\n        configurable: false,\n        enumerable: true,\n        writable: false,\n        value: VERSION\n    });\n\n    extendHidden({\n        extend,\n        extendHidden\n    });\n\n    /**\n     * Removes the {@link ARIA} namespace from the global object and restores\n     * any previous value that may have been there.\n     *\n     * @return {Object}\n     *         The {@link ARIA} namespace.\n     */\n    ARIA.noConflict = function () {\n\n        globalVariable.ARIA = previousAria;\n\n        return ARIA;\n\n    };\n\n    globalVariable.ARIA = ARIA;\n\n\n\n\n\n    // Wrappers for DOM attribute manipulation.\n    ARIA.extendHidden(/** @lends ARIA */{\n\n        /**\n         * A wrapper for setting an attribute on an element. This enables a\n         * developer to replace this function if they want {@link ARIA} to work\n         * with a virtual DOM.\n         *\n         * Used by {@link ARIA.set}, {@link ARIA.remove}, {@link ARIA.add},\n         * {@link ARIA.setRole} and {@link ARIA.identify}.\n         *\n         * @private\n         * @param   {Element} element\n         *          Element whose attribute should be set.\n         * @param   {String}  attribute\n         *          Attribute to set.\n         * @param   {?}       value\n         *          Value of the attribute to set.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.setDOMAttribute(div, \"class\", \"one\");\n         * div; // -> <div id=\"div\" class=\"one\");\n         */\n        setDOMAttribute(element, attribute, value) {\n            element.setAttribute(attribute, value);\n        },\n\n        /**\n         * A wrapper for getting the attribute on an element. This enables a\n         * developer to replace this function if they want {@link ARIA} to work\n         * with a virtual DOM.\n         *\n         * Used by {@link ARIA.set}, {@link ARIA.get}, {@link ARIA.remove},\n         * {@link ARIA.add}, {@link ARIA.getRole}, {@link ARIA.identify} and\n         * {@link ARIA.startListening}.\n         *\n         * @private\n         * @param   {Element}     element\n         *          Element whose attribute should be retrieved.\n         * @param   {String}      attribute\n         *          Attribute to access.\n         * @return  {String|null}\n         *          Value of the attribute or null if the attribute does not\n         *          exist.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.getDOMAttribute(div, \"id\"); // -> \"div\"\n         */\n        getDOMAttribute(element, attribute) {\n            return element.getAttribute(attribute);\n        },\n\n        /**\n         * A wrapper for checking whether or not an element has the given\n         * attribute. This enables a developer to replace this function if they\n         * want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used by {@link ARIA.has} and {@ARIA.hasRole}\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element that should be checked for an attribute.\n         * @param   {String}   attribute\n         *          Attribute to check.\n         * @return  {Boolean}\n         *          true if the element has the given attribute, false\n         *          otherwise.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.hasDOMAttribute(div, \"class\"); // -> false\n         * ARIA.hasDOMAttribute(div, \"id\"); // -> true\n         */\n        hasDOMAttribute(element, attribute) {\n            return element.hasAttribute(attribute);\n        },\n\n        /**\n         * A wrapper for checking whether or not an element has the given\n         * attribute. This enables a developer to replace this function if they\n         * want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used by {@link ARIA.remove} and {@ARIA.removeRole}\n         *\n         * @private\n         * @param   {Element} element\n         *          Element whose attribute should be removed.\n         * @param   {String}  attribute\n         *          Attribute to remove.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.hasDOMAttribute(div, \"id\"); // -> true\n         * ARIA.removeDOMAttribute(div, \"id\");\n         * ARIA.hasDOMAttribute(div, \"id\"); // -> false\n         */\n        removeDOMAttribute(element, attribute) {\n            element.removeAttribute(attribute);\n        }\n\n    });\n\n    // Helper functions that we'll ue elsewhere.\n    ARIA.extendHidden(/** @lends ARIA */{\n\n        /**\n         * Checks to see if the given object is array-like. That is, it could be\n         * converted into an array.\n         *\n         * Used in {@link ARIA.isObjectLike}, {@link ARIA.asArray} and\n         * {@link new ARIA.List}\n         *\n         * @private\n         * @param   {?}       object\n         *          Object to test.\n         * @return  {Boolean}\n         *          true if the object is array-like, false otherwise.\n         *\n         * @example <caption>Values that would return true</caption>\n         * ARIA.isArrayLike([]);\n         * ARIA.isArrayLike(document.querySelectorAll(\"a\"));\n         * ARIA.isArrayLike(\"abc\");\n         * ARIA.isArrayLike({\"0\": \"zero\", \"1\": \"one\", \"length\": 2});\n         * ARIA.isArrayLike(new Set());\n         *\n         * @example <caption>Values that would return false</caption>\n         * ARIA.isArrayLike(123);\n         * ARIA.isArrayLike(document.querySelector(\"a\"));\n         * ARIA.isArrayLike({\"0\": \"zero\", \"1\": \"one\"});\n         */\n        isArrayLike(object) {\n\n            return object\n                ? (\n                    typeof object.length === \"number\"\n                    || typeof object[Symbol.iterator] === \"function\"\n                )\n                : false;\n\n        },\n\n        /**\n         * Checks to see if the given object is object-like.\n         *\n         * Used in {@link ARIA.set}, {@link ARIA.add}, {@link ARIA.remove},\n         * {@link ARIA.on} and {@link ARIA.off}.\n         *\n         * @param  {?}       object\n         *         Object to test.\n         * @return {Boolean}\n         *         true if the object is object-like, false otherwise.\n         *\n         * @example <caption>Values that return true</caption>\n         * ARIA.isObjectLike({});\n         *\n         * @example <caption>Values that return false</caption>\n         * ARIA.isObjectLike([]);\n         * ARIA.isArrayLike({\"0\": \"zero\", \"1\": \"one\", \"length\": 2});\n         */\n        isObjectLike(object) {\n\n            return (\n                object !== null\n                && typeof object === \"object\"\n                && !ARIA.isArrayLike(object)\n            );\n\n        },\n\n        /**\n         * Returns an array containing the given object unless the object can be\n         * converted into an array. A key exception is that a string is not\n         * split but returned as an array containing the string.\n         *\n         * Uses {@link ARIA.isArrayLike}.\n         *\n         * Used in {@link ARIA.set}, {@link ARIA.remove}, {@link ARIA.add},\n         * {@link ARIA.chain} and {@link ARIA.List#constructor}.\n         *\n         * @private\n         * @param   {?}     object\n         *          Object to convert into an array.\n         * @return  {Array}\n         *          Array based on the given object.\n         *\n         * @example <caption>Array-like structures are converted</caption>\n         * ARIA.asArray(document.querySelectorAll(\"a\")); // -> [<a>, <a>, ...]\n         * ARIA.asArray(new Set([\"one\", \"two\"])); // -> [\"one\", \"two\"]\n         * ARIA.asArray([\"one\", \"two\"]); // -> [\"one\", \"two\"]\n         *\n         * @example <caption>Non-array-like structures are wrapped</caption>\n         * ARIA.asArray(\"abc\"); // -> [\"abc\"];\n         * ARIA.asArray(123); // -> [123];\n         * ARIA.asArray({ \"a\": \"Alpha\" }); // -> [{ \"a\": \"Alpha\" }];\n         *\n         * @example <caption>null and undefined generate empty arrays</caption>\n         * ARIA.asArray(null); // -> []\n         * ARIA.asArray(undefined); // -> []\n         * ARIA.asArray(); // -> []\n         */\n        asArray(object) {\n\n            return (object === null || object === undefined)\n                ? []\n                : (typeof object !== \"string\" && ARIA.isArrayLike(object))\n                    ? [...object]\n                    : [object];\n\n        },\n\n        /**\n         * Checks to see if the given object is a Node.\n         *\n         * Used in {@link ARIA.asString}.\n         *\n         * @private\n         * @param   {?}       object\n         *          Object to test.\n         * @return  {Boolean}\n         *          true if the given object is a node, false otherwise.\n         *\n         * @example <caption>Values that would return true</caption>\n         * ARIA.isNode(document.createElement(\"div\"));\n         * ARIA.isNode(document.getElementById(\"real\")); // If element exists.\n         * ARIA.isNode(document.createTextNode(\"a\"));\n         * ARIA.isNode(document.createComment(\"a\"));\n         *\n         * @example <caption>Results that would return false</caption>\n         * ARIA.isNode({nodeName: \"a\", nodeType: 1});\n         * ARIA.isNode(null);\n         * ARIA.isNode(document.querySelectorAll(\"a\"));\n         */\n        isNode(object) {\n            return object instanceof Node;\n        },\n\n        /**\n         * Converts the given object into a string. Special consideration is\n         * given to Nodes (see {@link ARIA.isNode} which is converted by\n         * returning the Node's ID (see {@link ARIA.identify}).\n         *\n         * Uses {@link ARIA.isNode} and {@link ARIA.identify}.\n         *\n         * Used in {@link ARIA.set}, {@link ARIA.remove} and {@link ARIA.add}.\n         *\n         * @private\n         * @param   {?}      object\n         *          Object to convert into a string.\n         * @return  {String}\n         *          String of the object.\n         *\n         * @example\n         * ARIA.asString(\"abc\"); // -> \"abc\"\n         * ARIA.asString(123); // -> \"123\"\n         * ARIA.asString({toString: function () { return \"def\"; }}); // -> \"def\"\n         * ARIA.asString(document.getElementById(\"ghi\")); // -> \"ghi\"\n         */\n        asString(object) {\n\n            return ARIA.isNode(object)\n                ? ARIA.identify(object)\n                : String(object);\n\n        }\n\n    });\n\n    /**\n     * A List handles the space-separated WAI-ARIA and role attributes. All\n     * values are unique.\n     *\n     * Used in {@link ARIA.set}, {@link ARIA.remove}, {@link ARIA.add},\n     * {@link ARIA.hasRole}, {@link ARIA.addRole}, {@link ARIA.removeRole},\n     * {@link ARIA.asRef}, {@link ARIA.on} and {@link ARIA.off}.\n     *\n     * @class\n     * @extends Set\n     */\n    ARIA.List = class extends Set {\n\n        /**\n         * The constructor is designed to take a list of values or the value of\n         * an attribute.\n         *\n         * Uses {@link ARIA.asArray}.\n         *\n         * @constructs ARIA.List\n         * @param      {[type]} value [description]\n         *\n         * @example\n         * var list1 = new ARIA.List(\n         *     document.getElementById(\"one\").getAttribute(\"aria-controls\")\n         * );\n         * var list2 = new ARIA.List(\"one two three\");\n         * var list3 = new ARIA.List([\"one\", \"two\", \"three\"]);\n         */\n        constructor(value) {\n\n            //*\n            let iterable = ARIA.asArray(value);\n\n            if (iterable.length === 1 && typeof iterable[0] === \"string\") {\n\n                let string = iterable[0].trim();\n\n                iterable = string\n                    ? string.split(/\\s+/)\n                    : [];\n\n            }\n            /*/\n            let iterable = [];\n\n            if (typeof value === \"string\") {\n\n                value = value.trim();\n                iterable = value\n                    ? value.split(/\\s+/)\n                    : [];\n\n            } else if (ARIA.isArrayLike(value)) {\n                iterable = value;\n            } else if (value) {\n                iterable = [value];\n            }\n            //*/\n\n            super(iterable);\n\n        }\n\n        /**\n         * Adds one or more values to the list. Any value that already exists in\n         * the list will not be duplicated. Values are trimmed before being\n         * added.\n         *\n         * @param {...String} values\n         *        Values to add to the list.\n         */\n        add(...values) {\n\n            values.forEach(\n                (value) => super.add.call(this, String(value).trim())\n            );\n\n        }\n\n        /**\n         * Removes one or more values from the list. Values are trimmed before\n         * being removed.\n         *\n         * @param {...String} values\n         *        Values to remove from the list.\n         */\n        delete(...values) {\n\n            values.forEach(\n                (value) => super.delete.call(this, String(value).trim())\n            );\n\n        }\n\n        /**\n         * Converts the current list into an array of values. Optionally, the\n         * values can be modified by pasing a mapping function and a context.\n         *\n         * @param  {Function}       [handler]\n         *         Optional function for converting the entries in the list.\n         * @param  {?}              [context]\n         *         Optional context for the optional function.\n         * @return {Array.<String>}\n         *         Array of the values.\n         *\n         * @example\n         * var list = new ARIA.List(\"one two three\");\n         * list.toArray(); // -> [\"one\", \"two\", \"three\"]\n         * list.toArray((v) => v.toUpperCase()); // -> [\"ONE\", \"TWO\", \"THREE\"]\n         */\n        toArray(handler, context) {\n            return Array.from(this, handler, context);\n        }\n\n        /**\n         * Converts the list into a string of space-separated values.\n         *\n         * @return {String}\n         *         Space-separated string of values.\n         *\n         * @example\n         * var list = new ARIA.List(\"one two three\");\n         * list.toString(); // -> \"one two three\"\n         * String(list); // -> \"one two three\"\n         */\n        toString() {\n            return this.toArray().join(\" \");\n        }\n\n    };\n\n    let expando = 0;\n\n    ARIA.extend(/** @lends ARIA */{\n\n        /**\n         * A wrapper for getting an element by ID. This enables a developer to\n         * replace this function if they want {@link ARIA} to work with a\n         * virtual DOM.\n         *\n         * Used in {@link ARIA.identify}, {@ink ARIA.refExists} and\n         * {@link ARIA.asRef}.\n         *\n         * @function\n         * @param    {String} id\n         *           ID of the element to access.\n         * @return   {Element|null}\n         *           The element with this given ID or null if the element\n         *           cannot be found.\n         *\n         * @example\n         * // Asuming markup is this:\n         * // <div id=\"real\"></div>\n         * ARIA.getById(\"real\"); // -> <div id=\"real\">\n         * ARIA.getById(\"not-real\"); // -> null\n         */\n        getById: document.getElementById.bind(document),\n\n        /**\n         * The default element ID prefix used by {@link ARIA.identify}.\n         *\n         * Used by {@link ARIA.identify}.\n         *\n         * @type {String}\n         */\n        defaultIdentifyPrefix: \"anonymous-element-\",\n\n        /**\n         * Returns the ID of the given element. If the element does not have an\n         * ID, a unique one is generated and assigned before being returned.\n         *\n         * Whenever this function is called within the {@link ARIA} library, the\n         * prefix is always set to {@link ARIA.defaultIdentifyPrefix}.\n         *\n         * Uses {@link ARIA.defaultIdentifyPrefix},\n         * {@link ARIA.getDOMAttribute}, {@link ARIA.setDOMAttribute} and\n         * {@link ARIA.getById}.\n         *\n         * Used in {@link ARIA.asString}.\n         *\n         * @param  {Element} element\n         *         The element whose ID should be returned.\n         * @param  {String}  [prefix=ARIA.defaultIdentifyPrefix]\n         *         The prefix of the ID that could be generated.\n         * @return {String}\n         *         The element's ID.\n         *\n         * @example <caption>IDs are returned or generated and returned</caption>\n         * // Assuming markup is:\n         * // <div class=\"thing\" id=\"one\"></div>\n         * // <div class=\"thing\"></div>\n         * var divs = document.querySelectorAll(\".thing\");\n         * ARIA.identify(divs[0]); // -> \"one\"\n         * ARIA.identify(divs[1]); // -> \"anonymous-element-0\"\n         * // Markup is now:\n         * // <div class=\"thing\" id=\"one\"></div>\n         * // <div class=\"thing\" id=\"anonymous-element-0\"></div>\n         *\n         * @example <caption>Prefix can be changed</caption>\n         * // Assuming markup is:\n         * // <div class=\"thing\"></div>\n         * // <div class=\"thing\"></div>\n         * var divs = document.querySelectorAll(\".thing\");\n         * ARIA.identify(divs[0]); // -> \"anonymous-element-0\"\n         * ARIA.identify(divs[1], \"id-\"); // -> \"id-1\"\n         * // Markup is now:\n         * // <div class=\"thing\" id=\"anonymous-element-0\"></div>\n         * // <div class=\"thing\" id=\"id-1\"></div>\n         */\n        identify(element, prefix = ARIA.defaultIdentifyPrefix) {\n\n            let id = ARIA.getDOMAttribute(element, \"id\");\n\n            if (!id) {\n\n                do {\n\n                    id = prefix + expando;\n                    expando += 1;\n\n                } while (ARIA.getById(id));\n\n                ARIA.setDOMAttribute(element, \"id\", id);\n\n            }\n\n            return id;\n\n        }\n\n    });\n\n    /**\n     * Normalises an attribute name so that it is in lowercase and always starts\n     * with \"aria-\". This function has the alias of {@link ARIA.normalize} and\n     * changing one will update the other.\n     *\n     * Used in {@link ARIA.set}, {@link ARIA.get}, {@link ARIA.has},\n     * {@link ARIA.remove}, {@link ARIA.add} and {@link ARIA.makeEventName}.\n     *\n     * @memberof ARIA\n     * @param    {String} attribute\n     *           Attribute to normalise.\n     * @return   {String}\n     *           Normalised attribute.\n     *\n     * @example\n     * ARIA.normalise(\"aria-busy\"); // -> \"aria-busy\"\n     * ARIA.normalise(\"busy\"); // -> \"aria-busy\"\n     * ARIA.normalise(\"  busy  \"); // -> \"aria-busy\"\n     * ARIA.normalise(\"BUSY\"); // -> \"aria-busy\"\n     */\n    let normalise = function (attribute) {\n\n        let string = String(attribute)\n            .toLowerCase()\n            .replace(/^\\s*(?:aria\\-)?|\\s*$/g, \"\");\n\n        return `aria-${string}`;\n\n    };\n\n    let normaliseDescriptor = {\n\n        configurable: false,\n        enumerable: true,\n\n        get() {\n            return normalise;\n        },\n\n        set(normaliser) {\n            normalise = normaliser;\n        }\n\n    };\n\n    Object.defineProperties(ARIA, {\n\n        normalise: normaliseDescriptor,\n\n        /**\n         * An alias of {@link ARIA.normalise}.\n         *\n         * @memberof ARIA\n         * @function\n         */\n        normalize: normaliseDescriptor\n\n    });\n\n    ARIA.extendHidden(/** @lends ARIA */{\n\n        /**\n         * Converts the value into elements.\n         *\n         * @private\n         * @param   {String} value\n         *          The string representation of the value.\n         * @return  {Array.<Element>}\n         *          Array containing the elements referenced. If the element\n         *          cannot be found, null will be in its place.\n         *\n         * Uses {@link ARIA.List} and {@link ARIA.get}.\n         *\n         * Used in {@link ARIA.getRef}.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * ARIA.asRef(\"one\"); // -> [<div id=\"one\">]\n         * ARIA.asRef(\"one two\"); // -> [<div id=\"one\">, null]\n         *\n         * @example <caption>Duplicated referneced are discarded</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * ARIA.asRef(\"one two one\"); // -> [<div id=\"one\">, null]\n         */\n        asRef(value) {\n\n            let list = new ARIA.List(value);\n\n            return list.toArray(ARIA.getById);\n\n        },\n\n        /**\n         * Converts the value into a boolean or string. This function is\n         * designed to work with WAI-ARIA attributes.\n         *\n         * Used in {@link ARIA.getState}.\n         *\n         * @private\n         * @param   {?} value\n         *          Value to interpret.\n         * @return  {Boolean|String}\n         *          Interpreted state.\n         *\n         * @example\n         * ARIA.asState(\"true\"); // -> true\n         * ARIA.asState(\"mixed\"); // -> \"mixed\"\n         * ARIA.asState(\"false\"); // -> false\n         * ARIA.asState(true); // -> true\n         * ARIA.asState(false); // -> false\n         *\n         * @example <caption>Any value not understood returns false</caption>\n         * ARIA.asState(1); // -> false\n         * ARIA.asState({}); // -> false\n         * ARIA.asState(); // -> false\n         * ARIA.asState(null); // -> false\n         * ARIA.asState(undefined); // -> false\n         * ARIA.asState(\"\"); // -> false\n         * ARIA.asState(\"  true  \"); // -> false\n         */\n        asState(value) {\n\n            return (value === \"mixed\" || typeof value === \"boolean\")\n                ? value\n                : typeof value === \"string\"\n                    ? value === \"true\"\n                    : false;\n\n        }\n\n    });\n\n\n\n\n\n\n    /**\n     * This callback can be used to create the value that a {@link ARIA} method\n     * will use. The value returned from this callback will be treated as if it\n     * had been passed into the {@link ARIA} method. So, for example, the value\n     * returned from this callback in {@link ARIA.set} will be set on the\n     * element. Specific information will be found in the methods which use this\n     * callback.\n     *\n     * @callback ARIA~callback\n     * @param    {Element} element\n     *           Element that will be modified.\n     * @param    {String}  value\n     *           Current value of the attribute.\n     * @param    {String}  attribute\n     *           Normalised attribute being manipulated.\n     * @return   {Boolean|Element|String}\n     *           Value that will be used by the {@link ARIA} method.\n     */\n\n    ARIA.extend(/** @lends ARIA */{\n\n        /**\n         * Sets one or more WAI-ARIA attributes on the given element. Attribute\n         * names will be normalised (see {@link ARIA.normalise}). When passing\n         * in an object of multiple attributes to set, the values of the object\n         * can be anything that the \"value\" parameter can be, including\n         * {@link ARIA~callback}.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.normalise},\n         * {@link ARIA.getDOMAttribute}, {@link ARIA.asArray},\n         * {@link ARIA.asString}, {@link ARIA.setDOMAttribute} and\n         * {@link ARIA.List}\n         *\n         * @param {Element}       element\n         *        Element to modify.\n         * @param {Object|String} attribute\n         *        Either the string of the attribute to set or an object of\n         *        attributes to values.\n         * @param {Array.<Element>|Boolean|Element|NodeList|String|ARIA~callback} [value]\n         *        Value of the attribute to set. Only necessary if the attribute\n         *        parameter is a string.\n         *\n         * @example <caption>Setting single attributes</caption>\n         * // Assuming markup is\n         * // <div id=\"one\"></div>\n         * // <div id=\"two\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.set(div, \"busy\", true);\n         * ARIA.set(div, \"label\", \"abc\");\n         * ARIA.set(div, \"controls\", document.getElementById(\"two\"));\n         * // Now markup is\n         * // <div id=\"one\"\n         * //     aria-busy=\"true\"\n         * //     aria-label=\"abc\"\n         * //     aria-controls=\"two\"></div>\n         * // <div id=\"two\"></div>\n         *\n         * @example <caption>Setting an attribute with a function</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-label=\"abc\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.set(div, \"label\", function (element, value, attribute) {\n         *     return value.toUpperCase() + \"__\" + attribute;\n         * });\n         * // Now markup is\n         * // <div id=\"one\" aria-label=\"ABC__aria-label\"></div>\n         *\n         * @example <caption>Setting multiple attributes</caption>\n         * // Assuming markup is\n         * // <div id=\"one\"></div>\n         * // <div id=\"two\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.set(div, {\n         *     busy: true,\n         *     label: \"abc\",\n         *     controls: document.getElementById(\"two\")\n         * });\n         * // Now markup is\n         * // <div id=\"one\"\n         * //     aria-busy=\"true\"\n         * //     aria-label=\"abc\"\n         * //     aria-controls=\"two\"></div>\n         * // <div id=\"two\"></div>\n         */\n        set: function set(element, attribute, value) {\n\n            if (ARIA.isObjectLike(attribute)) {\n\n                Object\n                    .entries(attribute)\n                    .forEach(([attr, val]) => set(element, attr, val));\n\n            } else {\n\n                let attr = ARIA.normalise(attribute);\n\n                if (typeof value === \"function\") {\n\n                    value = value(\n                        element,\n                        ARIA.getDOMAttribute(element, attr),\n                        attr\n                    );\n\n                }\n\n                let list = new ARIA.List(\n                    ARIA.asArray(value).map(ARIA.asString)\n                );\n\n                ARIA.setDOMAttribute(element, attr, list);\n\n            }\n\n        },\n\n        /**\n         * Gets the value of the given attribute from the given element. The\n         * attribute is normalised (see {@link ARIA.normalise}) before being\n         * retrieved.\n         *\n         * Uses {@link ARIA.getDOMAttribute} and {@link ARIA.normalise}.\n         *\n         * Used by {@link ARIA.getRef}.\n         *\n         * @param  {Element}     element\n         *         Element whose attribute should be retrieved.\n         * @param  {String}      attribute\n         *         Attribute that should be retrieved.\n         * @return {String|null}\n         *         Value of the attribute or null if the attribute is not set.\n         *\n         * @example\n         * // Assuming markup is\n         * // <div id=\"one\" aria-busy=\"true\" aria-label=\"abc\" aria-hidden><div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.get(div, \"busy\"); // -> \"true\"\n         * ARIA.get(div, \"label\"); // -> \"abc\"\n         * ARIA.get(div, \"hidden\"); // -> \"\"\n         * ARIA.get(div, \"checked\"); // -> null\n         */\n        get(element, attribute) {\n            return ARIA.getDOMAttribute(element, ARIA.normalise(attribute));\n        },\n\n        /**\n         * Gets the references from the given element's attribute. The attribute\n         * is normalised (see {@link ARIA.normalise}) and the results are\n         * returned in an array.\n         *\n         * Uses {@link ARIA.asRef} and {@link ARIA.get}.\n         *\n         * Used in {@link ARIA.hasRef}\n         *\n         * @param  {Element}         element\n         *         Element whose references should be retrieved.\n         * @param  {String}          attribute\n         *         Attribute containing the references.\n         * @return {Array.<Element>}\n         *         Array containing the elements referenced. If the element\n         *         cannot be found, null will be in its place.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-controls=\"two three\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.getRef(element, \"controls\"); // -> [<div id=\"two\">, null]\n         *\n         * @example <caption>Duplicated referneced are discarded</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-controls=\"two three two\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.getRef(element, \"controls\"); // -> [<div id=\"two\">, null]\n         */\n        getRef(element, attribute) {\n            return ARIA.asRef(ARIA.get(element, attribute));\n        },\n\n        /**\n         * Gets the state value of teh given attribute of the given element. The\n         * attribute name is normalised (see {@link ARIA.normalise}).\n         *\n         * Uses {@link ARIA.asState} and {@link ARIA.get}\n         *\n         * @param  {Element} element\n         *         Element whose state should be returned.\n         * @param  {String}  attribute\n         *         Attribute to get.\n         * @return {Bolean|String}\n         *         State.\n         *\n         * @example <caption>Recognised values</caption>\n         * // Assuming markup is\n         * // <div id=\"one\"\n         * //     aria-busy=\"true\" aria-checked=\"mixed\" aria-disabled=\"false\"\n         * // ></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.getState(div, \"busy\"); // -> true\n         * ARIA.getState(div, \"checked\"); // -> \"mixed\"\n         * ARIA.getState(div, \"disabled\"); // -> false\n         *\n         * @example <caption>Missing attributes and other values are false</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-label=\"abc\" aria-checked=\"  true  \">\n         * var div = document.getElementById(\"one\");\n         * ARIA.getState(div, \"busy\"); // -> false\n         * ARIA.getState(div, \"label\"); // -> false\n         * ARIA.getState(div, \"checked\"); // -> false\n         */\n        getState(element, attribute) {\n            return ARIA.asState(ARIA.get(element, attribute));\n        },\n\n        /**\n         * Checks to see if the given element has the attribute. The attribute\n         * is normalised (see {@link ARIA.normalise}) before being checked.\n         *\n         * Uses {@link ARIA.hasDOMAttribute} and {@link ARIA.normalise}.\n         *\n         * Used in {@link ARIA.hasRef}\n         *\n         * @param  {Element} element\n         *         Element whose attribute should be checked.\n         * @param  {String}  attribute\n         *         Attribute that should be checked.\n         * @return {Boolean}\n         *         true if the element has the attribute, false otherwise.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.has(div, \"busy\"); // -> true\n         * ARIA.has(div, \"checked\"); // -> false\n         */\n        has(element, attribute) {\n            return ARIA.hasDOMAttribute(element, ARIA.normalise(attribute));\n        },\n\n        /**\n         * Checks to see that the given element has all the references defined\n         * in the given attribute. This function will return false if one of\n         * the references does not exist even if other ones do. The attribute is\n         * normalised before being checked (see {@link ARIA.normalise}). This\n         * function will return false if the attribute is not set.\n         *\n         * Uses {@link ARIA.has} and {@link ARIA.getRef} and\n         *\n         * @param  {Element} element\n         *         Element whose references should be checked.\n         * @param  {String}  attribute\n         *         Attribute containing the reference(s).\n         * @return {Boolean}\n         *         true if all references exist, false otherwise.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"a\" aria-labelledby=\"b\" aria-controls=\"b c\"></div>\n         * // <div id=\"b\"></div>\n         * var div = document.getElementById(\"a\");\n         * ARIA.hasRef(div, \"labelledby\"); // -> true\n         * ARIA.hasRef(div, \"controls\"); // -> false\n         * ARIA.hasRef(div, \"describedby\"); // -> false\n         */\n        hasRef(element, attribute) {\n\n            return (\n                ARIA.has(element, attribute)\n                && !ARIA.getRef(element, attribute).includes(null)\n            );\n\n        },\n\n        /**\n         * Either removes the attribute from the given element or removes a part\n         * of the attribute. Attributes can be removed/modified one at a time by\n         * passing a string as the attribute parameter or multiple can be\n         * manipulated by passing an object (to remove the entire attribute\n         * when passing an object, set the value to null or undefined).\n         *\n         * The value can be a {@link ARIA~callback} and the returned value from\n         * this callback will be treated as if it has been passed to the\n         * function originally.\n         *\n         * When removing part of the attribute, if the attribute value becomes\n         * blank then the attribute will be removed.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.normalise},\n         * {@link ARIA.List}, {@link ARIA.asArray}, {@link ARIA.asString},\n         * {@link ARIA.removeDOMAttribute}, {@link ARIA.getDOMAttribute}, and\n         * {@link ARIA.setDOMAttribute}\n         *\n         * @param {Element}       element\n         *        Element to modify.\n         * @param {Object|String} attribute\n         *        Either the string of the attribute to remove/modify or an\n         *        object of attributes to values.\n         * @param {Array.<Element>|Boolean|Element|NodeList|String|ARIA~callback} [value]\n         *        Value of the attribute to remove/modify. Only necessary if the\n         *        attribute parameter is a string.\n         *\n         * @example <caption>Removing the attribute</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * var div = document.getElementById(\"div\");\n         * // All of these will remove the attribute\n         * ARIA.remove(div, \"controls\");\n         * ARIA.remove(div, \"controls\", undefined);\n         * ARIA.remove(div, \"controls\", null);\n         * ARIA.remove(div, \"controls\", function () {\n         *     return undefined;\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     return null;\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     // not returning is the same as returning undefined\n         * });\n         * ARIA.remove(div, {\n         *     controls: undefined\n         * });\n         * ARIA.remove(div, {\n         *     controls: null\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *         return undefined;\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *         return null;\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *         // not returning is the same as returning undefined\n         *     }\n         * });\n         * // Removing all values will remove the attribute\n         * ARIA.remove(div, \"controls\", \"two\");\n         * ARIA.remove(div, \"controls\", document.getElementById(\"two\"));\n         * ARIA.remove(div, \"controls\", function () {\n         *     return \"two\";\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     return document.getElementById(\"two\");\n         * });\n         * ARIA.remove(div, {\n         *     controls: \"two\"\n         * });\n         * ARIA.remove(div, {\n         *     controls: document.getElementById(\"two\")\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return \"two\";\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return document.getElementById(\"two\");\n         *     }\n         * });\n         * // In each of these cases, the markup will now be.\n         * // <div id=\"one\"></div>\n         *\n         * @example <caption>Removing part of the attribute</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-controls=\"two three\"></div>\n         * var div = document.getElementById(\"one\");\n         * // Each of these have the same effect.\n         * ARIA.remove(div, \"controls\", \"two\");\n         * ARIA.remove(div, \"controls\", document.getElementById(\"two\"));\n         * ARIA.remove(div, \"controls\", function () {\n         *     return \"two\";\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     return document.getElementById(\"two\");\n         * });\n         * ARIA.remove(div, {\n         *     controls: \"two\"\n         * });\n         * ARIA.remove(div, {\n         *     controls: document.getElementById(\"two\")\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return \"two\";\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return document.getElementById(\"two\");\n         *     }\n         * });\n         * // In each of these cases, the markup will now be.\n         * // <div id=\"one\" aria-controls=\"three\"></div>\n         */\n        remove: function remove(element, attribute, value) {\n\n            if (ARIA.isObjectLike(attribute)) {\n\n                Object\n                    .entries(attribute)\n                    .forEach(([attr, val]) => remove(element, attr, val));\n\n            } else {\n\n                let normalised = ARIA.normalise(attribute);\n\n                if (value === null || value === undefined) {\n                    ARIA.removeDOMAttribute(element, normalised);\n                } else {\n\n                    let current = ARIA.getDOMAttribute(element, normalised);\n\n                    if (typeof value === \"function\") {\n\n                        remove(\n                            element,\n                            normalised,\n                            value(element, current, normalised)\n                        );\n\n                    } else {\n\n                        let list = new ARIA.List(current);\n                        let values = ARIA.asArray(value).map(ARIA.asString);\n\n                        list.delete(...values);\n\n                        if (list.size) {\n                            ARIA.setDOMAttribute(element, normalised, list);\n                        } else {\n                            ARIA.removeDOMAttribute(element, normalised);\n                        }\n\n                    }\n\n                }\n\n            }\n\n        },\n\n        /**\n         * Adds a value to the given WAI-ARIA attribute for the given element.\n         * If the element does not have the attribute, it is created. If the\n         * value is a function, the result is added to the attribute. Attributes\n         * can be either created/modified individually by passing a string as\n         * the attribute parameter or mutliple can be set at once by passing an\n         * object. Any duplicated values wil be ignored so you will not be able\n         * to add a value that is already in the value.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.normalise},\n         * {@link ARIA.getDOMAttribute}, {@link ARIA.List},\n         * {@link ARIA.asArray}, {@link ARIA.asString} and\n         * {@link ARIA.setDOMAttribute}.\n         *\n         * @param {Element}       element\n         *        Element to modify.\n         * @param {Object|String} attribute\n         *        Either the string of the attribute to create/modify or an\n         *        object of attributes to values.\n         * @param {Array.<Element>|Boolean|Element|NodeList|String|ARIA~callback} [value]\n         *        Value of the attribute to create/modify. Only necessary if the\n         *        attribute parameter is a string.\n         *\n         * @example <caption>Creating/adding to an attribute</caption>\n         * // Assuming markup is\n         * // <div id=\"a\"></div>\n         * // <div id=\"d\"></div>\n         * // <div id=\"g\"></div>\n         * var divA = document.getElementById(\"a\");\n         * var divD = document.getElementById(\"d\");\n         * var divG = document.getElementById(\"g\");\n         * ARIA.add(divA, \"controls\", \"b\");\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b\"></div>\n         * ARIA.add(divA, \"controls\", function () { return \"c\"; });\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c\"></div>\n         * ARIA.add(divA, \"controls\", divD);\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d\"></div>\n         * ARIA.add(divA, {controls: \"e\"});\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d e\"></div>\n         * ARIA.add(divA, {controls: function () { return \"f\"; }});\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d e f\"></div>\n         * ARIA.add(divA, {controls: function () { return divG; }});\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d e f g\"></div>\n         *\n         * @example <caption>Duplicate values are ignored</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * // <div id=\"two\"></div>\n         * var div1 = document.getElementById(\"one\");\n         * var div2 = document.getElementById(\"two\");\n         * ARIA.add(div1, \"controls\", \"two\");\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, \"controls\", function () { return \"two\"; });\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, \"controls\", div2);\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, \"controls\", function () { return div2; });\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: \"two\"});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: function () { return \"two\"; }});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: div2});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: function () { return div2; }});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         */\n        add: function add(element, attribute, value) {\n\n            if (ARIA.isObjectLike(attribute)) {\n\n                Object\n                    .entries(attribute)\n                    .forEach(([attr, val]) => add(element, attr, val));\n\n            } else {\n\n                let attr = ARIA.normalise(attribute);\n                let current = ARIA.getDOMAttribute(element, attr);\n\n                if (typeof value === \"function\") {\n                    value = value(element, current, attr);\n                }\n\n                let list = new ARIA.List(current);\n                let values = ARIA.asArray(value).map(ARIA.asString);\n\n                list.add(...values);\n                ARIA.setDOMAttribute(element, attr, list);\n\n            }\n\n        }\n\n    });\n\n\n\n\n\n    ARIA.extend(/** @lends ARIA */{\n\n        /**\n         * Sets the role of the given element.\n         *\n         * Uses {@link ARIA.setDOMAttribute}\n         *\n         * @param {Element} element\n         *        Element whose role should be set.\n         * @param {String}  role\n         *        Value of the role to set.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.setRole(div, \"tablist\");\n         * // Now markup is\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * ARIA.setRole(div, \"presentation\");\n         * // Now markup is\n         * // <div id=\"one\" role=\"presentation\"></div>\n         */\n        setRole(element, role) {\n            ARIA.setDOMAttribute(element, \"role\", role);\n        },\n\n        /**\n         * Gets the role of the given element.\n         *\n         * Uses {@link ARIA.getDOMAttribute}\n         *\n         * Used by {@link ARIA.hasRole}, {@link ARIA.addRole} and\n         * {@link ARIA.removeRole}\n         *\n         * @param  {Element}     element\n         *         Element whose role should be returned.\n         * @return {String|null}\n         *         The value of the role or null if the element does not have a\n         *         role attribute.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.getRole(document.getElementById(\"one\")); // -> \"tablist\"\n         * ARIA.getRole(document.getElementById(\"two\")); // -> null\n         */\n        getRole(element) {\n            return ARIA.getDOMAttribute(element, \"role\");\n        },\n\n        /**\n         * Checks to see if the given element has a role. If the role is\n         * defined, the check is to see whether or not the role contains the\n         * given value.\n         *\n         * Uses {@ARIA.hasDOMAttribute}, {@link ARIA.List} and {@ARIA.getRole}.\n         *\n         * @param  {Element}  element\n         *         Element to test.\n         * @param  {String}   [role]\n         *         Option role to check.\n         * @return {Boolean}\n         *         true if the element has a role (or the specific role), false\n         *         otherwise.\n         *\n         * @example <caption>Checking for a role</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.hasRole(document.getElementById(\"one\")); // -> true\n         * ARIA.hasRole(document.getElementById(\"two\")); // -> false\n         *\n         * @example <caption>Checking for a specific role</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.hasRole(div, \"tablist\"); // -> true\n         * ARIA.hasRole(div, \"tab\"); // -> false\n         * ARIA.hasRole(div, \"presentation\"); // -> false\n         */\n        hasRole(element, role) {\n\n            let has = ARIA.hasDOMAttribute(element, \"role\");\n\n            if (role && has) {\n\n                let list = new ARIA.List(ARIA.getRole(element));\n\n                has = list.has(role);\n\n            }\n\n            return has;\n\n        },\n\n        /**\n         * Adds one or more roles to the given element. If the element didn't\n         * have a role attribute before adding, the attribute is created.\n         *\n         * Uses {@link ARIA.List}, {@link ARIA.getRole} and\n         * {@link ARIA.setRole}.\n         *\n         * @param {Element}   element\n         *        Element whose role should be manipulated.\n         * @param {...String} roles\n         *        Roles to add.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"presentation\"></div>\n         * // <div id=\"two\"></div>\n         * var div1 = document.getElementById(\"one\");\n         * var div2 = document.getElementById(\"two\");\n         * ARIA.addRole(div1, \"tablist\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"presentation tablist\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.addRole(div1, \"image\", \"tab\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"presentation tablist image tab\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.addRole(div2, \"panel\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"presentation tablist image tab\"></div>\n         * // <div id=\"two\" role=\"panel\"></div>\n         *\n         * @example <caption>Roles are not duplicated</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.addRole(div, \"tablist\");\n         * // Markup is still:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * ARIA.addRole(div, \"tablist\", \"presentation\", \"tablist\");\n         * // Markup is now:\n         * // <div id=\"one\" role=\"tablist presentation\"></div>\n         */\n        addRole(element, ...roles) {\n\n            let list = new ARIA.List(ARIA.getRole(element));\n\n            list.add(...roles);\n            ARIA.setRole(element, list);\n\n        },\n\n        /**\n         * Removes one or more roles from the given element. If no roles are\n         * defined or all roles are removed, the role attribute is removed.\n         *\n         * Uses {@link ARIA.List}, {@link ARIA.getRole}, {@link ARIA.setRole}\n         * and {@link ARIA.removeDOMAttribute}.\n         *\n         * @param {Element}   element\n         *        Element whose roles should be manipulated.\n         * @param {...String} [roles]\n         *        Optional roles to removed.\n         *\n         * @example <caption>Removing individual roles</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"image tab panel banner\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.removeRole(div, \"tab\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"image panel banner\"></div>\n         * ARIA.removeRole(div, \"banner\", \"image\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"panel\"></div>\n         *\n         * @example <caption>Removing the role attribute</caption>\n         * // Assuming markup is:\n         * <div id=\"one\" role=\"banner\"></div>\n         * <div id=\"two\" role=\"image\"></div>\n         * ARIA.removeRole(document.getElementById(\"one\"), \"banner\");\n         * // Assuming markup is:\n         * <div id=\"one\"></div>\n         * <div id=\"two\" role=\"image\"></div>\n         * ARIA.removeRole(document.getElementById(\"two\"));\n         * // Assuming markup is:\n         * <div id=\"one\"></div>\n         * <div id=\"two\"></div>\n         */\n        removeRole: function removeRole(element, ...roles) {\n\n            if (roles.length) {\n\n                let list = new ARIA.List(ARIA.getRole(element));\n\n                list.delete(...roles);\n\n                if (list.size) {\n                    ARIA.setRole(element, list);\n                } else {\n                    removeRole(element);\n                }\n\n            } else {\n                ARIA.removeDOMAttribute(element, \"role\");\n            }\n\n        }\n\n    });\n\n\n\n\n\n    let focusable = [\n            \"a[href]\",\n            \"button\",\n            \"iframe\",\n            \"input:not([type=\\\"hidden\\\"]):not([type=\\\"file\\\"])\",\n            \"select\",\n            \"textarea\",\n            \"[tabindex]\",\n            \"[contentEditable=\\\"true\\\"]\"\n        ]\n        .map((sel) => `${sel}:not([disabled]):not([hidden]):not([inert])`)\n        .join(\",\");\n\n    ARIA.extendHidden(/** @lends ARIA */{\n\n        /**\n         * A wrapped for matching an element with a CSS selector.\n         *\n         * Used in {@link ARIA.makeFocusable}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element to test.\n         * @param   {String}   selector\n         *          CSS selector to match.\n         * @return  {Boolean}\n         *          true if the element matches, false otherwise.\n         *\n         * @example\n         * var div // -> <div id=\"one\">\n         * ARIA.is(div, \"div\"); // -> true\n         * ARIA.is(div, \"#one\"); // -> true\n         * ARIA.is(div, \"[id]\"); // -> true\n         * ARIA.is(div, \".class\"); // -> false\n         */\n        is(element, selector) {\n            return element.matches(selector);\n        }\n\n    });\n\n    ARIA.extend(/** @lends ARIA */{\n\n        /**\n         * A CSS selector that matches elements which are already focusable.\n         *\n         * Used in {@link ARIA.makeFocusable}.\n         *\n         * @type {String}\n         */\n        focusable,\n\n        /**\n         * Makes the given element focusable. If the isTabbable flag is set to\n         * true then the element will be added to the tab order, if not then\n         * the element will only be programmatically focusable. This function\n         * will not affect any element that is already focusable (identified\n         * using the {@link ARIA.focusable} selector).\n         *\n         * Uses {@link ARIA.is} and {@link ARIA.focusable} and\n         * {@link ARIA.setDOMAttribute}.\n         *\n         * @param {Element} element\n         *        Element that should become focusable.\n         * @param {Boolean} [isTabbable=false]\n         *        true if the element should be added to the tab order.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * // <div id=\"two\"></div>\n         * var div1 = document.getElementById(\"one\");\n         * var div2 = document.getElementById(\"two\");\n         * ARIA.makeFocusable(div1);\n         * // Now markup is:\n         * // <div id=\"one\" tabindex=\"-1\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.makeFocusable(div2, true);\n         * // Now markup is:\n         * // <div id=\"one\" tabindex=\"-1\"></div>\n         * // <div id=\"two\" tabindex=\"0\"></div>\n         *\n         * @example <caption>No effect to already focusable elements</caption>\n         * // Assuming markup is:\n         * // <a href=\"#\" class=\".one\"></a>\n         * // <div tabindex=\"0\" class=\".one\"></div>\n         * // <button type=\"button\" class=\".one\"></button>\n         * // <input type=\"text\" class=\".one\">\n         * document.querySelectorAll(\".one\").forEach(function (element) {\n         *     ARIA.makeFocusable(element);\n         * });\n         * // Markup is still:\n         * // <a href=\"#\" class=\".one\"></a>\n         * // <div tabindex=\"0\" class=\".one\"></div>\n         * // <button type=\"button\" class=\".one\"></button>\n         * // <input type=\"text\" class=\".one\">\n         */\n        makeFocusable(element, isTabbable = false) {\n\n            if (!ARIA.is(element, ARIA.focusable)) {\n\n                ARIA.setDOMAttribute(\n                    element,\n                    \"tabindex\",\n                    isTabbable\n                        ? 0\n                        : -1\n                );\n\n            }\n\n        }\n\n    });\n\n\n\n\n\n    /**\n     * A helper function that chains together methods and can work with a\n     * collection of elements. This function aims to make working with the\n     * {@link ARIA} methods easier. The methods will manipulate the element(s)\n     * but they will not return anything that the methods would. For example,\n     * you can chain {@link ARIA.set} but you will not get anything back from\n     * {@link ARIA.get}.\n     *\n     * The chaining functions work by automatically passing the element as the\n     * first argument to the original {@link ARIA} method.\n     *\n     * Uses {@link ARIA.asArray}.\n     *\n     * @param  {Array.<Element>|Element} elements\n     *         Element or elements to manipulate.\n     * @return {Object}\n     *         Chain object.\n     *\n     * @example <caption>Working with an element</caption>\n     * // Assuming markup is:\n     * // <div id=\"one\"></div>\n     * ARIA.chain(document.getElementById(\"one\"))\n     *     .set({\n     *         busy: true,\n     *         label: \"abc\"\n     *     })\n     *     .makeFocusable()\n     * // Now markup is:\n     * // <div id=\"one\" aria-busy=\"true\" aria-label=\"abc\" tabindex=\"-1\"></div>\n     *\n     * @example <caption>Working with multiple elements</caption>\n     * // Assuming markup is:\n     * // <div id=\"one\"></div>\n     * // <div class=\"thing\"></div>\n     * // <div class=\"thing\"></div>\n     * ARIA.chain(document.querySelectorAll(\".thing\"))\n     *     .identify()\n     *     .set(\"labelledby\", document.getElementById(\"one\"));\n     * // Now markup is\n     * // <div id=\"one\"></div>\n     * // <div class=\"thing\" id=\"anonymous-element-0\" aria-labelledby=\"one\"></div>\n     * // <div class=\"thing\" id=\"anonymous-element-1\" aria-labelledby=\"one\"></div>\n     */\n    ARIA.chain = function (elements) {\n\n        return new Proxy(ARIA, {\n\n            get: function (target, name) {\n\n                return typeof target[name] === \"function\"\n                    ? function (...args) {\n\n                        ARIA.asArray(elements).forEach(function (element) {\n                            target[name](element, ...args);\n                        });\n\n                        return this;\n\n                    }\n                    : target[name];\n\n            }\n\n        });\n\n    };\n\n\n\n\n\n    ARIA.extendHidden(/** @lends ARIA */{\n\n        /**\n         * The WeakMap used to store the MutationObserver that makes the events\n         * work.\n         *\n         * Used in {@link ARIA.startListening} and {@link ARIA.stopListening}.\n         *\n         * @private\n         * @type    {WeakMap}\n         */\n        observerStore: new WeakMap(),\n\n        /**\n         * A wrapper for adding an event listener to an element. The event is\n         * always bound in the bubbling phase. The event object is passed to the\n         * hander. This function enables a developer to replace this function if\n         * they want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used in {@link ARIA.on}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element that should gain the event listener.\n         * @param   {String}   event\n         *          Name of the event to bind.\n         * @param   {Function} handler\n         *          Handler for the event listener.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.addEventListener(one, \"click\", function (event) {\n         *     console.log(\"hi\");\n         * });\n         * // Event listener is now bound.\n         */\n        addEventListener(element, event, handler) {\n            element.addEventListener(event, handler);\n        },\n\n        /**\n         * A wrapper for removing an event listener from an element. The event\n         * listener is always in the bubbling phase. This function enables a\n         * developer to replace this function if they want {@link ARIA} to work\n         * with a virtual DOM.\n         *\n         * Used in {@link ARIA.off}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element whose event handler sound be removed.\n         * @param   {String}   event\n         *          Name of the event.\n         * @param   {Function} handler\n         *          Function to remove.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler = function () {\n         *     console.log(\"hi\");\n         * };\n         * ARIA.addEventListener(one, \"click\", handler);\n         * // Event listener is now bound.\n         * ARIA.removeEventListener(one, \"click\", handler);\n         * // Event listener is now un-bound.\n         */\n        removeEventListener(element, event, handler) {\n            element.removeEventListener(event, handler);\n        },\n\n        /**\n         * A wrapper for dispatching an event on an element. The dispatched\n         * event always bubbles. This function enables a developer to replace\n         * this function if they want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used in {@link ARIA.startListening}.\n         *\n         * @private\n         * @param   {Element} element\n         *          Element that should have an event dispatched.\n         * @param   {String}  event\n         *          Name of the vent to dispatch.\n         * @param   {Object}  [detail={}]\n         *          Optional information for the event.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * div.addEventListener(\"test\", function () {\n         *     console.log(\"hi\");\n         * });\n         * ARIA.dispatchEvent(div, \"test\"); // logs: \"hi\"\n         *\n         * @example <caption>Padding information to the handler</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * div.addEventListener(\"test\", function (e) {\n         *     console.log(e.detail.data);\n         * });\n         * ARIA.dispatchEvent(div, \"test\" {data: \"abc\"}); // logs: \"abc\"\n         */\n        dispatchEvent(element, event, detail = {}) {\n\n            element.dispatchEvent(new CustomEvent(event, {\n                bubbles: true,\n                cancelable: true,\n                detail\n            }));\n\n        },\n\n        /**\n         * Creates the function that will handle the mutations detected by a\n         * MutationObserver listening to the given element.\n         *\n         * Uses {@link ARIA.handleMutation}.\n         *\n         * Used in {@link ARIA.startListening}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element that has the MutationObserver listening for changes.\n         * @return  {Function}\n         *          Function that will handle mutations.\n         */\n        createMutationHandler(element) {\n\n            return (mutationList) => {\n                mutationList.forEach(ARIA.handleMutation, element)\n            };\n\n        },\n\n        /**\n         * Checks to see whether the mutation was aa WAI-ARIA attribute and\n         * whether the value has actually changed before dispatching an event on\n         * the element bound as the function's context.\n         *\n         * Uses {@link ARIA.dispatchEvent}, {@link ARIA.makeEventName} and\n         * {@link ARIA.getDOMAttribute}.\n         *\n         * Used in {@link ARIA.createMutationHandler}.\n         *\n         * @private\n         * @this    {Element}\n         *          Element upon which the mutations were heard.\n         * @param   {MutationRecord} mutation\n         *          Object with information about the mutation.\n         */\n        handleMutation(mutation) {\n\n            let {\n                type,\n                attributeName,\n                oldValue\n            } = mutation;\n            let element = this;\n\n            if (type === \"attributes\" && attributeName.startsWith(\"aria-\")) {\n\n                let value = ARIA.getDOMAttribute(element, attributeName);\n\n                if (value !== oldValue) {\n\n                    let event = ARIA.makeEventName(attributeName);\n\n                    ARIA.dispatchEvent(element, event, {\n                        attributeName,\n                        value,\n                        oldValue\n                    });\n\n                }\n\n            }\n\n        }\n\n\n    });\n\n    ARIA.extend(/** @lends ARIA */{\n\n        eventNamePrefix: \"wai-aria__\",\n\n        /**\n         * Creates the event name from the given attribute. The event is\n         * normalised (see {@link ARIA.normalise}) and prefixed with\n         * {@link ARIA.eventNamePrefix}.\n         *\n         * Uses {@link ARIA.eventNamePrefix} and {@link ARIA.normalise}.\n         *\n         * @param {String} attribute\n         *        Attribute to convert into an event name.\n         *\n         * @example\n         * ARIA.makeEventName(\"busy\"); // -> \"wai-aria__aria-busy\"\n         * ARIA.makeEventName(\"aria-checked\"); // -> \"wai-aria__aria-checked\"\n         */\n        makeEventName(attribute) {\n            return ARIA.eventNamePrefix + ARIA.normalise(attribute);\n        },\n\n        /**\n         * Starts listening to WAI-ARIA attribute changes and dispatching an\n         * event when a change occurs. Listening occurs through a\n         * MutationObserver which is stored on the element using\n         * {@link ARIA.observer}. If the element is already listening for\n         * attribute changes, no action is taken. The MutationObserver can be\n         * disconnected using {@link ARIA.stopListening}.\n         *\n         * Uses {@link ARIA.observerStore}, {@link ARIA.createMutationHandler}.\n         *\n         * Used in {@link ARIA.on}.\n         *\n         * @param {Element} element\n         *        Element whose WAI-ARIA attribute changes should be listened\n         *        for.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.startListening(div);\n         * div[ARIA.observer]; // -> MutationObserver\n         */\n        startListening(element) {\n\n            let store = ARIA.observerStore;\n\n            if (!store.has(element)) {\n\n                let observer = new MutationObserver(\n                    ARIA.createMutationHandler(element)\n                );\n\n                observer.observe(element, {\n                    attributes: true,\n                    attributeOldValue: true\n                });\n\n                store.set(element, observer);\n\n            }\n\n        },\n\n        /**\n         * Disconnects the MutationObserver added in {@link ARIA.startListening}\n         * and removes it from the given element (if it was there in the first\n         * place). This function isn't called in the {@link ARIA} library but it\n         * may be useful for unloading elements.\n         *\n         * Uses {@link ARIA.observerStore}.\n         *\n         * @param {Element} element\n         *        Element whose MutationObserver should disconnect and be\n         *        removed.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.startListening(div);\n         * div[ARIA.observer]; // -> MutationObserver\n         * ARIA.stopListening(div);\n         * div[ARIA.observer]; // -> undefined\n         */\n        stopListening(element) {\n\n            let store = ARIA.observerStore;\n            let observer = store.get(element);\n\n            if (observer) {\n\n                observer.disconnect();\n                store.delete(element);\n\n            }\n\n        },\n\n        /**\n         * Adds one or more event listeners to an element. The event listeners\n         * listen for changes to WAI-ARIA attributes and the role attribute.\n         * This function will only work if the changes on the element are being\n         * listened to so this function will automatically call\n         * {@link ARIA.startListening}. Calling {@link ARIA.stopListening} on\n         * the element will prevent the event handlers from executing.\n         *\n         * To remove an event listener, use {@link ARIA.off}.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.List},\n         * {@link ARIA.makeEventName} and {@link ARIA.addEventListener}.\n         *\n         * @param {Element}                      element\n         *        Element to bind listeners.\n         * @param {Array.<String>|Object|String} attributes\n         *        Either an object of attributes to handlers, an array of\n         *        attributes or a string of space-separated attributes.\n         * @param {Function}                     [handler]\n         *        Handler to execute when the attribute changes. This is only\n         *        required if the attributes parameters is not an object.\n         *\n         * @example <caption>Listening for one attribute change</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.on(div, \"busy\", function (e) {\n         *     console.log(\n         *         \"'%s' changed from '%s' to '%s'\",\n         *         e.detail.attributeName,\n         *         e.detail.oldValue,\n         *         e.detail.value\n         *     );\n         * });\n         * ARIA.set(div, \"busy\", false);\n         * // Logs \"'aria-busy' changed from 'true' to 'false'\"\n         *\n         * @example <caption>Listening for multiple attribute changes</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\" aria-checked=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * // You can use either an array of strings ...\n         * ARIA.on(div, [\"busy\", \"checked\"], function (e) {\n         *     console.log(\"'%s' changed\", e.detail.attributeName);\n         * });\n         * // ... or a space-separated string.\n         * ARIA.on(div, \"busy checked\", function () {\n         *     console.log(\"'%s' changed\", e.detail.attributeName);\n         * });\n         * ARIA.set(div, \"busy\", false);\n         * // Logs \"'aria-busy' changed\"\n         * ARIA.set(div, \"checked\", false);\n         * // Logs \"'aria-checked' changed\"\n         *\n         * @example <caption>Multiple events and handlers</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\" aria-checked=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.on(div, {\n         *     busy: function (e) {\n         *         console.log(\"'%s' changed (1)\", e.detail.attributeName);\n         *     },\n         *     checked: function (e) {\n         *         console.log(\"'%s' changed (2)\", e.detail.attributeName);\n         *     }\n         * });\n         * ARIA.set(div, \"busy\", false);\n         * // Logs \"'aria-busy' changed (1)\"\n         * ARIA.set(div, \"checked\", false);\n         * // Logs \"'aria-checked' changed (2)\"\n         */\n        on: function on(element, attributes, handler) {\n\n            if (ARIA.isObjectLike(attributes)) {\n\n                Object\n                    .entries(attributes)\n                    .forEach(([attr, func]) => on(element, attr, func));\n\n            } else {\n\n                let list = new ARIA.List(attributes);\n\n                ARIA.startListening(element);\n                list\n                    .toArray(ARIA.makeEventName)\n                    .forEach(function (event) {\n                        ARIA.addEventListener(element, event, handler);\n                    });\n\n            }\n\n        },\n\n        /**\n         * Removes an event listener from the given element. The event listener\n         * would have been triggered if a WAI-ARIA attribute changed.\n         *\n         * Used {@link ARIA.List}, {@link ARIA.makeEventName} and\n         * {@link ARIA.removeEventListener}.\n         *\n         * @param {Element}                      element\n         *        Element from which the event handler should be removed.\n         * @param {Array.<String>|Object|String} attributes\n         *        Either an array of attributes, a space-separated string of\n         *        attributes or an object of attributes to functions.\n         * @param {Function}                     [handler]\n         *        Function to remove.\n         *\n         * @example <caption>Removing a single handler</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler = function () {\n         *     // ...\n         * };\n         * // ...\n         * ARIA.off(div, \"busy\", handler);\n         *\n         * @example <caption>Removing a handler from multiple attributes</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler = function () {\n         *     // ...\n         * };\n         * // ...\n         * // Either:\n         * ARIA.off(div, [\"busy\", \"checked\"], handler);\n         * // Or:\n         * ARIA.off(div, \"busy checked\", handler);\n         *\n         * @example <caption>Removing multiple handlers</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler1 = function () {\n         *     // ...\n         * };\n         * var handler2 = function () {\n         *     // ...\n         * };\n         * // ...\n         * ARIA.off(div, {\n         *     busy: handler1,\n         *     checked: handler2\n         * });\n         */\n        off: function off(element, attributes, handler) {\n\n            if (ARIA.isObjectLike(attributes)) {\n\n                Object\n                    .entries(attributes)\n                    .forEach(([attr, func]) => off(element, attr, func));\n\n            } else {\n\n                let list = new ARIA.List(attributes);\n\n                list\n                    .toArray(ARIA.makeEventName)\n                    .forEach(function (event) {\n                        ARIA.removeEventListener(element, event, handler);\n                    });\n\n            }\n\n        }\n\n    });\n\n\n}(window));"],"file":"aria.js"}