{"version":3,"sources":["aria.es5.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","value","getter","call","_typeof","Symbol","iterator","obj","constructor","_slicedToArray","arr","Array","isArray","_arr","_n","_d","_e","_s","_i","next","done","push","err","sliceIterator","TypeError","_classCallCheck","instance","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","setPrototypeOf","__proto__","_toConsumableArray","arr2","from","globalVariable","ARIA","previousAria","hiddenDescriptor","extendHidden","methods","entries","forEach","_ref","_ref2","name","assign","extend","noConflict","setDOMAttribute","element","attribute","setAttribute","getDOMAttribute","getAttribute","hasDOMAttribute","hasAttribute","removeDOMAttribute","removeAttribute","isArrayLike","isObjectLike","asArray","concat","isNode","Node","asString","identify","String","List","_Set","_class","this","iterable","string","trim","split","Set","_this2","_len","arguments","values","_key","_this3","_len2","_key2","handler","context","toArray","join","expando","getById","document","getElementById","bind","defaultIdentifyPrefix","prefix","id","normalise","toLowerCase","replace","normaliseDescriptor","set","normaliser","normalize","asRef","asState","_ref3","_ref4","attr","val","list","map","getRef","getState","has","hasRef","includes","remove","_ref5","_ref6","normalised","current","delete","apply","size","add","_ref7","_ref8","setRole","role","getRole","hasRole","addRole","_len3","roles","_key3","removeRole","_len4","_key4","focusable","sel","is","selector","matches","makeFocusable","isTabbable","chain","elements","Proxy","_len5","args","_key5","observerStore","WeakMap","addEventListener","event","removeEventListener","dispatchEvent","detail","CustomEvent","bubbles","cancelable","createMutationHandler","mutationList","handleMutation","mutation","type","attributeName","oldValue","startsWith","makeEventName","eventNamePrefix","startListening","store","observer","MutationObserver","observe","attributes","attributeOldValue","stopListening","disconnect","on","_ref9","_ref10","func","off","_ref11","_ref12","window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/*! aria - v0.1.0 - MIT license - 2018-4-1 */\n(function (globalVariable) {\n    \"use strict\";\n\n    /**\n     * @file    A library for handling WAI-ARIA attributes, the role attribute and\n     *          other accessibility functions.\n     * @author  James \"Skateside\" Long <sk85ide@hotmail.com>\n     * @version 0.1.0\n     */\n\n    /**\n     * Namespace for the WAI-ARIA functions.\n     *\n     * @namespace\n     */\n\n    var ARIA = {};\n\n    /**\n     * The current version. This is written in Semantic Versioning (SemVer).\n     *\n     * @memberof ARIA\n     * @constant\n     * @type     {String}\n     */\n    var VERSION = \"0.1.0\";\n\n    var previousAria = globalVariable.ARIA;\n    var hiddenDescriptor = {\n        configurable: true,\n        enumerable: false,\n        writable: true\n    };\n\n    /**\n     * @memberof ARIA\n     * @param    {Object} methods\n     *           Methods to publicly add to the {@link ARIA} namespace.\n     */\n    function extend(methods) {\n        Object.assign(ARIA, methods);\n    }\n\n    /**\n     * @memberof ARIA\n     * @param    {Object} methods\n     *           Methods to privately add to the {@link ARIA} namespace.\n     */\n    function extendHidden(methods) {\n\n        Object.entries(methods).forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                name = _ref2[0],\n                value = _ref2[1];\n\n            Object.defineProperty(ARIA, name, Object.assign({ value: value }, hiddenDescriptor));\n        });\n    }\n\n    Object.defineProperty(ARIA, \"VERSION\", {\n        configurable: false,\n        enumerable: true,\n        writable: false,\n        value: VERSION\n    });\n\n    extendHidden({\n        extend: extend,\n        extendHidden: extendHidden\n    });\n\n    /**\n     * Removes the {@link ARIA} namespace from the global object and restores\n     * any previous value that may have been there.\n     *\n     * @return {Object}\n     *         The {@link ARIA} namespace.\n     */\n    ARIA.noConflict = function () {\n\n        globalVariable.ARIA = previousAria;\n\n        return ARIA;\n    };\n\n    globalVariable.ARIA = ARIA;\n\n    // Wrappers for DOM attribute manipulation.\n    ARIA.extendHidden( /** @lends ARIA */{\n\n        /**\n         * A wrapper for setting an attribute on an element. This enables a\n         * developer to replace this function if they want {@link ARIA} to work\n         * with a virtual DOM.\n         *\n         * Used by {@link ARIA.set}, {@link ARIA.remove}, {@link ARIA.add},\n         * {@link ARIA.setRole} and {@link ARIA.identify}.\n         *\n         * @private\n         * @param   {Element} element\n         *          Element whose attribute should be set.\n         * @param   {String}  attribute\n         *          Attribute to set.\n         * @param   {?}       value\n         *          Value of the attribute to set.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.setDOMAttribute(div, \"class\", \"one\");\n         * div; // -> <div id=\"div\" class=\"one\");\n         */\n        setDOMAttribute: function setDOMAttribute(element, attribute, value) {\n            element.setAttribute(attribute, value);\n        },\n\n\n        /**\n         * A wrapper for getting the attribute on an element. This enables a\n         * developer to replace this function if they want {@link ARIA} to work\n         * with a virtual DOM.\n         *\n         * Used by {@link ARIA.set}, {@link ARIA.get}, {@link ARIA.remove},\n         * {@link ARIA.add}, {@link ARIA.getRole}, {@link ARIA.identify} and\n         * {@link ARIA.startListening}.\n         *\n         * @private\n         * @param   {Element}     element\n         *          Element whose attribute should be retrieved.\n         * @param   {String}      attribute\n         *          Attribute to access.\n         * @return  {String|null}\n         *          Value of the attribute or null if the attribute does not\n         *          exist.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.getDOMAttribute(div, \"id\"); // -> \"div\"\n         */\n        getDOMAttribute: function getDOMAttribute(element, attribute) {\n            return element.getAttribute(attribute);\n        },\n\n\n        /**\n         * A wrapper for checking whether or not an element has the given\n         * attribute. This enables a developer to replace this function if they\n         * want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used by {@link ARIA.has} and {@ARIA.hasRole}\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element that should be checked for an attribute.\n         * @param   {String}   attribute\n         *          Attribute to check.\n         * @return  {Boolean}\n         *          true if the element has the given attribute, false\n         *          otherwise.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.hasDOMAttribute(div, \"class\"); // -> false\n         * ARIA.hasDOMAttribute(div, \"id\"); // -> true\n         */\n        hasDOMAttribute: function hasDOMAttribute(element, attribute) {\n            return element.hasAttribute(attribute);\n        },\n\n\n        /**\n         * A wrapper for checking whether or not an element has the given\n         * attribute. This enables a developer to replace this function if they\n         * want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used by {@link ARIA.remove} and {@ARIA.removeRole}\n         *\n         * @private\n         * @param   {Element} element\n         *          Element whose attribute should be removed.\n         * @param   {String}  attribute\n         *          Attribute to remove.\n         *\n         * @example\n         * var div = document.getElementById(\"div\"); // -> <div id=\"div\">\n         * ARIA.hasDOMAttribute(div, \"id\"); // -> true\n         * ARIA.removeDOMAttribute(div, \"id\");\n         * ARIA.hasDOMAttribute(div, \"id\"); // -> false\n         */\n        removeDOMAttribute: function removeDOMAttribute(element, attribute) {\n            element.removeAttribute(attribute);\n        }\n    });\n\n    // Helper functions that we'll ue elsewhere.\n    ARIA.extendHidden( /** @lends ARIA */{\n\n        /**\n         * Checks to see if the given object is array-like. That is, it could be\n         * converted into an array.\n         *\n         * Used in {@link ARIA.isObjectLike}, {@link ARIA.asArray} and\n         * {@link new ARIA.List}\n         *\n         * @private\n         * @param   {?}       object\n         *          Object to test.\n         * @return  {Boolean}\n         *          true if the object is array-like, false otherwise.\n         *\n         * @example <caption>Values that would return true</caption>\n         * ARIA.isArrayLike([]);\n         * ARIA.isArrayLike(document.querySelectorAll(\"a\"));\n         * ARIA.isArrayLike(\"abc\");\n         * ARIA.isArrayLike({\"0\": \"zero\", \"1\": \"one\", \"length\": 2});\n         * ARIA.isArrayLike(new Set());\n         *\n         * @example <caption>Values that would return false</caption>\n         * ARIA.isArrayLike(123);\n         * ARIA.isArrayLike(document.querySelector(\"a\"));\n         * ARIA.isArrayLike({\"0\": \"zero\", \"1\": \"one\"});\n         */\n        isArrayLike: function isArrayLike(object) {\n\n            return object ? typeof object.length === \"number\" || typeof object[Symbol.iterator] === \"function\" : false;\n        },\n\n\n        /**\n         * Checks to see if the given object is object-like.\n         *\n         * Used in {@link ARIA.set}, {@link ARIA.add}, {@link ARIA.remove},\n         * {@link ARIA.on} and {@link ARIA.off}.\n         *\n         * @param  {?}       object\n         *         Object to test.\n         * @return {Boolean}\n         *         true if the object is object-like, false otherwise.\n         *\n         * @example <caption>Values that return true</caption>\n         * ARIA.isObjectLike({});\n         *\n         * @example <caption>Values that return false</caption>\n         * ARIA.isObjectLike([]);\n         * ARIA.isArrayLike({\"0\": \"zero\", \"1\": \"one\", \"length\": 2});\n         */\n        isObjectLike: function isObjectLike(object) {\n\n            return object !== null && (typeof object === \"undefined\" ? \"undefined\" : _typeof(object)) === \"object\" && !ARIA.isArrayLike(object);\n        },\n\n\n        /**\n         * Returns an array containing the given object unless the object can be\n         * converted into an array. A key exception is that a string is not\n         * split but returned as an array containing the string.\n         *\n         * Uses {@link ARIA.isArrayLike}.\n         *\n         * Used in {@link ARIA.set}, {@link ARIA.remove}, {@link ARIA.add},\n         * {@link ARIA.chain} and {@link ARIA.List#constructor}.\n         *\n         * @private\n         * @param   {?}     object\n         *          Object to convert into an array.\n         * @return  {Array}\n         *          Array based on the given object.\n         *\n         * @example <caption>Array-like structures are converted</caption>\n         * ARIA.asArray(document.querySelectorAll(\"a\")); // -> [<a>, <a>, ...]\n         * ARIA.asArray(new Set([\"one\", \"two\"])); // -> [\"one\", \"two\"]\n         * ARIA.asArray([\"one\", \"two\"]); // -> [\"one\", \"two\"]\n         *\n         * @example <caption>Non-array-like structures are wrapped</caption>\n         * ARIA.asArray(\"abc\"); // -> [\"abc\"];\n         * ARIA.asArray(123); // -> [123];\n         * ARIA.asArray({ \"a\": \"Alpha\" }); // -> [{ \"a\": \"Alpha\" }];\n         *\n         * @example <caption>null and undefined generate empty arrays</caption>\n         * ARIA.asArray(null); // -> []\n         * ARIA.asArray(undefined); // -> []\n         * ARIA.asArray(); // -> []\n         */\n        asArray: function asArray(object) {\n\n            return object === null || object === undefined ? [] : typeof object !== \"string\" && ARIA.isArrayLike(object) ? [].concat(_toConsumableArray(object)) : [object];\n        },\n\n\n        /**\n         * Checks to see if the given object is a Node.\n         *\n         * Used in {@link ARIA.asString}.\n         *\n         * @private\n         * @param   {?}       object\n         *          Object to test.\n         * @return  {Boolean}\n         *          true if the given object is a node, false otherwise.\n         *\n         * @example <caption>Values that would return true</caption>\n         * ARIA.isNode(document.createElement(\"div\"));\n         * ARIA.isNode(document.getElementById(\"real\")); // If element exists.\n         * ARIA.isNode(document.createTextNode(\"a\"));\n         * ARIA.isNode(document.createComment(\"a\"));\n         *\n         * @example <caption>Results that would return false</caption>\n         * ARIA.isNode({nodeName: \"a\", nodeType: 1});\n         * ARIA.isNode(null);\n         * ARIA.isNode(document.querySelectorAll(\"a\"));\n         */\n        isNode: function isNode(object) {\n            return object instanceof Node;\n        },\n\n\n        /**\n         * Converts the given object into a string. Special consideration is\n         * given to Nodes (see {@link ARIA.isNode} which is converted by\n         * returning the Node's ID (see {@link ARIA.identify}).\n         *\n         * Uses {@link ARIA.isNode} and {@link ARIA.identify}.\n         *\n         * Used in {@link ARIA.set}, {@link ARIA.remove} and {@link ARIA.add}.\n         *\n         * @private\n         * @param   {?}      object\n         *          Object to convert into a string.\n         * @return  {String}\n         *          String of the object.\n         *\n         * @example\n         * ARIA.asString(\"abc\"); // -> \"abc\"\n         * ARIA.asString(123); // -> \"123\"\n         * ARIA.asString({toString: function () { return \"def\"; }}); // -> \"def\"\n         * ARIA.asString(document.getElementById(\"ghi\")); // -> \"ghi\"\n         */\n        asString: function asString(object) {\n\n            return ARIA.isNode(object) ? ARIA.identify(object) : String(object);\n        }\n    });\n\n    /**\n     * A List handles the space-separated WAI-ARIA and role attributes. All\n     * values are unique.\n     *\n     * Used in {@link ARIA.set}, {@link ARIA.remove}, {@link ARIA.add},\n     * {@link ARIA.hasRole}, {@link ARIA.addRole}, {@link ARIA.removeRole},\n     * {@link ARIA.asRef}, {@link ARIA.on} and {@link ARIA.off}.\n     *\n     * @class\n     * @extends Set\n     */\n    ARIA.List = function (_Set) {\n        _inherits(_class, _Set);\n\n        /**\n         * The constructor is designed to take a list of values or the value of\n         * an attribute.\n         *\n         * Uses {@link ARIA.asArray}.\n         *\n         * @constructs ARIA.List\n         * @param      {[type]} value [description]\n         *\n         * @example\n         * var list1 = new ARIA.List(\n         *     document.getElementById(\"one\").getAttribute(\"aria-controls\")\n         * );\n         * var list2 = new ARIA.List(\"one two three\");\n         * var list3 = new ARIA.List([\"one\", \"two\", \"three\"]);\n         */\n        function _class(value) {\n            _classCallCheck(this, _class);\n\n            var iterable = ARIA.asArray(value);\n\n            if (iterable.length === 1 && typeof iterable[0] === \"string\") {\n\n                var string = iterable[0].trim();\n\n                iterable = string ? string.split(/\\s+/) : [];\n            }\n\n            return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, iterable));\n        }\n\n        /**\n         * Adds one or more values to the list. Any value that already exists in\n         * the list will not be duplicated. Values are trimmed before being\n         * added.\n         *\n         * @param {...String} values\n         *        Values to add to the list.\n         */\n\n\n        _createClass(_class, [{\n            key: \"add\",\n            value: function add() {\n                var _this2 = this;\n\n                for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n                    values[_key] = arguments[_key];\n                }\n\n                values.forEach(function (value) {\n                    return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"add\", _this2).call(_this2, String(value).trim());\n                });\n            }\n\n            /**\n             * Removes one or more values from the list. Values are trimmed before\n             * being removed.\n             *\n             * @param {...String} values\n             *        Values to remove from the list.\n             */\n\n        }, {\n            key: \"delete\",\n            value: function _delete() {\n                var _this3 = this;\n\n                for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    values[_key2] = arguments[_key2];\n                }\n\n                values.forEach(function (value) {\n                    return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"delete\", _this3).call(_this3, String(value).trim());\n                });\n            }\n\n            /**\n             * Converts the current list into an array of values. Optionally, the\n             * values can be modified by pasing a mapping function and a context.\n             *\n             * @param  {Function}       [handler]\n             *         Optional function for converting the entries in the list.\n             * @param  {?}              [context]\n             *         Optional context for the optional function.\n             * @return {Array.<String>}\n             *         Array of the values.\n             *\n             * @example\n             * var list = new ARIA.List(\"one two three\");\n             * list.toArray(); // -> [\"one\", \"two\", \"three\"]\n             * list.toArray((v) => v.toUpperCase()); // -> [\"ONE\", \"TWO\", \"THREE\"]\n             */\n\n        }, {\n            key: \"toArray\",\n            value: function toArray(handler, context) {\n                return Array.from(this, handler, context);\n            }\n\n            /**\n             * Converts the list into a string of space-separated values.\n             *\n             * @return {String}\n             *         Space-separated string of values.\n             *\n             * @example\n             * var list = new ARIA.List(\"one two three\");\n             * list.toString(); // -> \"one two three\"\n             * String(list); // -> \"one two three\"\n             */\n\n        }, {\n            key: \"toString\",\n            value: function toString() {\n                return this.toArray().join(\" \");\n            }\n        }]);\n\n        return _class;\n    }(Set);\n\n    var expando = 0;\n\n    ARIA.extend( /** @lends ARIA */{\n\n        /**\n         * A wrapper for getting an element by ID. This enables a developer to\n         * replace this function if they want {@link ARIA} to work with a\n         * virtual DOM.\n         *\n         * Used in {@link ARIA.identify}, {@ink ARIA.refExists} and\n         * {@link ARIA.asRef}.\n         *\n         * @function\n         * @param    {String} id\n         *           ID of the element to access.\n         * @return   {Element|null}\n         *           The element with this given ID or null if the element\n         *           cannot be found.\n         *\n         * @example\n         * // Asuming markup is this:\n         * // <div id=\"real\"></div>\n         * ARIA.getById(\"real\"); // -> <div id=\"real\">\n         * ARIA.getById(\"not-real\"); // -> null\n         */\n        getById: document.getElementById.bind(document),\n\n        /**\n         * The default element ID prefix used by {@link ARIA.identify}.\n         *\n         * Used by {@link ARIA.identify}.\n         *\n         * @type {String}\n         */\n        defaultIdentifyPrefix: \"anonymous-element-\",\n\n        /**\n         * Returns the ID of the given element. If the element does not have an\n         * ID, a unique one is generated and assigned before being returned.\n         *\n         * Whenever this function is called within the {@link ARIA} library, the\n         * prefix is always set to {@link ARIA.defaultIdentifyPrefix}.\n         *\n         * Uses {@link ARIA.defaultIdentifyPrefix},\n         * {@link ARIA.getDOMAttribute}, {@link ARIA.setDOMAttribute} and\n         * {@link ARIA.getById}.\n         *\n         * Used in {@link ARIA.asString}.\n         *\n         * @param  {Element} element\n         *         The element whose ID should be returned.\n         * @param  {String}  [prefix=ARIA.defaultIdentifyPrefix]\n         *         The prefix of the ID that could be generated.\n         * @return {String}\n         *         The element's ID.\n         *\n         * @example <caption>IDs are returned or generated and returned</caption>\n         * // Assuming markup is:\n         * // <div class=\"thing\" id=\"one\"></div>\n         * // <div class=\"thing\"></div>\n         * var divs = document.querySelectorAll(\".thing\");\n         * ARIA.identify(divs[0]); // -> \"one\"\n         * ARIA.identify(divs[1]); // -> \"anonymous-element-0\"\n         * // Markup is now:\n         * // <div class=\"thing\" id=\"one\"></div>\n         * // <div class=\"thing\" id=\"anonymous-element-0\"></div>\n         *\n         * @example <caption>Prefix can be changed</caption>\n         * // Assuming markup is:\n         * // <div class=\"thing\"></div>\n         * // <div class=\"thing\"></div>\n         * var divs = document.querySelectorAll(\".thing\");\n         * ARIA.identify(divs[0]); // -> \"anonymous-element-0\"\n         * ARIA.identify(divs[1], \"id-\"); // -> \"id-1\"\n         * // Markup is now:\n         * // <div class=\"thing\" id=\"anonymous-element-0\"></div>\n         * // <div class=\"thing\" id=\"id-1\"></div>\n         */\n        identify: function identify(element) {\n            var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ARIA.defaultIdentifyPrefix;\n\n\n            var id = ARIA.getDOMAttribute(element, \"id\");\n\n            if (!id) {\n\n                do {\n\n                    id = prefix + expando;\n                    expando += 1;\n                } while (ARIA.getById(id));\n\n                ARIA.setDOMAttribute(element, \"id\", id);\n            }\n\n            return id;\n        }\n    });\n\n    /**\n     * Normalises an attribute name so that it is in lowercase and always starts\n     * with \"aria-\". This function has the alias of {@link ARIA.normalize} and\n     * changing one will update the other.\n     *\n     * Used in {@link ARIA.set}, {@link ARIA.get}, {@link ARIA.has},\n     * {@link ARIA.remove}, {@link ARIA.add} and {@link ARIA.makeEventName}.\n     *\n     * @memberof ARIA\n     * @param    {String} attribute\n     *           Attribute to normalise.\n     * @return   {String}\n     *           Normalised attribute.\n     *\n     * @example\n     * ARIA.normalise(\"aria-busy\"); // -> \"aria-busy\"\n     * ARIA.normalise(\"busy\"); // -> \"aria-busy\"\n     * ARIA.normalise(\"  busy  \"); // -> \"aria-busy\"\n     * ARIA.normalise(\"BUSY\"); // -> \"aria-busy\"\n     */\n    var normalise = function normalise(attribute) {\n\n        var string = String(attribute).toLowerCase().replace(/^\\s*(?:aria\\-)?|\\s*$/g, \"\");\n\n        return \"aria-\" + string;\n    };\n\n    var normaliseDescriptor = {\n\n        configurable: false,\n        enumerable: true,\n\n        get: function get() {\n            return normalise;\n        },\n        set: function set(normaliser) {\n            normalise = normaliser;\n        }\n    };\n\n    Object.defineProperties(ARIA, {\n\n        normalise: normaliseDescriptor,\n\n        /**\n         * An alias of {@link ARIA.normalise}.\n         *\n         * @memberof ARIA\n         * @function\n         */\n        normalize: normaliseDescriptor\n\n    });\n\n    ARIA.extendHidden( /** @lends ARIA */{\n\n        /**\n         * Converts the value into elements.\n         *\n         * @private\n         * @param   {String} value\n         *          The string representation of the value.\n         * @return  {Array.<Element>}\n         *          Array containing the elements referenced. If the element\n         *          cannot be found, null will be in its place.\n         *\n         * Uses {@link ARIA.List} and {@link ARIA.get}.\n         *\n         * Used in {@link ARIA.getRef}.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * ARIA.asRef(\"one\"); // -> [<div id=\"one\">]\n         * ARIA.asRef(\"one two\"); // -> [<div id=\"one\">, null]\n         *\n         * @example <caption>Duplicated referneced are discarded</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * ARIA.asRef(\"one two one\"); // -> [<div id=\"one\">, null]\n         */\n        asRef: function asRef(value) {\n\n            var list = new ARIA.List(value);\n\n            return list.toArray(ARIA.getById);\n        },\n\n\n        /**\n         * Converts the value into a boolean or string. This function is\n         * designed to work with WAI-ARIA attributes.\n         *\n         * Used in {@link ARIA.getState}.\n         *\n         * @private\n         * @param   {?} value\n         *          Value to interpret.\n         * @return  {Boolean|String}\n         *          Interpreted state.\n         *\n         * @example\n         * ARIA.asState(\"true\"); // -> true\n         * ARIA.asState(\"mixed\"); // -> \"mixed\"\n         * ARIA.asState(\"false\"); // -> false\n         * ARIA.asState(true); // -> true\n         * ARIA.asState(false); // -> false\n         *\n         * @example <caption>Any value not understood returns false</caption>\n         * ARIA.asState(1); // -> false\n         * ARIA.asState({}); // -> false\n         * ARIA.asState(); // -> false\n         * ARIA.asState(null); // -> false\n         * ARIA.asState(undefined); // -> false\n         * ARIA.asState(\"\"); // -> false\n         * ARIA.asState(\"  true  \"); // -> false\n         */\n        asState: function asState(value) {\n\n            return value === \"mixed\" || typeof value === \"boolean\" ? value : typeof value === \"string\" ? value === \"true\" : false;\n        }\n    });\n\n    /**\n     * This callback can be used to create the value that a {@link ARIA} method\n     * will use. The value returned from this callback will be treated as if it\n     * had been passed into the {@link ARIA} method. So, for example, the value\n     * returned from this callback in {@link ARIA.set} will be set on the\n     * element. Specific information will be found in the methods which use this\n     * callback.\n     *\n     * @callback ARIA~callback\n     * @param    {Element} element\n     *           Element that will be modified.\n     * @param    {String}  value\n     *           Current value of the attribute.\n     * @param    {String}  attribute\n     *           Normalised attribute being manipulated.\n     * @return   {Boolean|Element|String}\n     *           Value that will be used by the {@link ARIA} method.\n     */\n\n    ARIA.extend( /** @lends ARIA */{\n\n        /**\n         * Sets one or more WAI-ARIA attributes on the given element. Attribute\n         * names will be normalised (see {@link ARIA.normalise}). When passing\n         * in an object of multiple attributes to set, the values of the object\n         * can be anything that the \"value\" parameter can be, including\n         * {@link ARIA~callback}.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.normalise},\n         * {@link ARIA.getDOMAttribute}, {@link ARIA.asArray},\n         * {@link ARIA.asString}, {@link ARIA.setDOMAttribute} and\n         * {@link ARIA.List}\n         *\n         * @param {Element}       element\n         *        Element to modify.\n         * @param {Object|String} attribute\n         *        Either the string of the attribute to set or an object of\n         *        attributes to values.\n         * @param {Array.<Element>|Boolean|Element|NodeList|String|ARIA~callback} [value]\n         *        Value of the attribute to set. Only necessary if the attribute\n         *        parameter is a string.\n         *\n         * @example <caption>Setting single attributes</caption>\n         * // Assuming markup is\n         * // <div id=\"one\"></div>\n         * // <div id=\"two\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.set(div, \"busy\", true);\n         * ARIA.set(div, \"label\", \"abc\");\n         * ARIA.set(div, \"controls\", document.getElementById(\"two\"));\n         * // Now markup is\n         * // <div id=\"one\"\n         * //     aria-busy=\"true\"\n         * //     aria-label=\"abc\"\n         * //     aria-controls=\"two\"></div>\n         * // <div id=\"two\"></div>\n         *\n         * @example <caption>Setting an attribute with a function</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-label=\"abc\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.set(div, \"label\", function (element, value, attribute) {\n         *     return value.toUpperCase() + \"__\" + attribute;\n         * });\n         * // Now markup is\n         * // <div id=\"one\" aria-label=\"ABC__aria-label\"></div>\n         *\n         * @example <caption>Setting multiple attributes</caption>\n         * // Assuming markup is\n         * // <div id=\"one\"></div>\n         * // <div id=\"two\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.set(div, {\n         *     busy: true,\n         *     label: \"abc\",\n         *     controls: document.getElementById(\"two\")\n         * });\n         * // Now markup is\n         * // <div id=\"one\"\n         * //     aria-busy=\"true\"\n         * //     aria-label=\"abc\"\n         * //     aria-controls=\"two\"></div>\n         * // <div id=\"two\"></div>\n         */\n        set: function set(element, attribute, value) {\n\n            if (ARIA.isObjectLike(attribute)) {\n\n                Object.entries(attribute).forEach(function (_ref3) {\n                    var _ref4 = _slicedToArray(_ref3, 2),\n                        attr = _ref4[0],\n                        val = _ref4[1];\n\n                    return set(element, attr, val);\n                });\n            } else {\n\n                var attr = ARIA.normalise(attribute);\n\n                if (typeof value === \"function\") {\n\n                    value = value(element, ARIA.getDOMAttribute(element, attr), attr);\n                }\n\n                var list = new ARIA.List(ARIA.asArray(value).map(ARIA.asString));\n\n                ARIA.setDOMAttribute(element, attr, list);\n            }\n        },\n\n        /**\n         * Gets the value of the given attribute from the given element. The\n         * attribute is normalised (see {@link ARIA.normalise}) before being\n         * retrieved.\n         *\n         * Uses {@link ARIA.getDOMAttribute} and {@link ARIA.normalise}.\n         *\n         * Used by {@link ARIA.getRef}.\n         *\n         * @param  {Element}     element\n         *         Element whose attribute should be retrieved.\n         * @param  {String}      attribute\n         *         Attribute that should be retrieved.\n         * @return {String|null}\n         *         Value of the attribute or null if the attribute is not set.\n         *\n         * @example\n         * // Assuming markup is\n         * // <div id=\"one\" aria-busy=\"true\" aria-label=\"abc\" aria-hidden><div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.get(div, \"busy\"); // -> \"true\"\n         * ARIA.get(div, \"label\"); // -> \"abc\"\n         * ARIA.get(div, \"hidden\"); // -> \"\"\n         * ARIA.get(div, \"checked\"); // -> null\n         */\n        get: function get(element, attribute) {\n            return ARIA.getDOMAttribute(element, ARIA.normalise(attribute));\n        },\n\n\n        /**\n         * Gets the references from the given element's attribute. The attribute\n         * is normalised (see {@link ARIA.normalise}) and the results are\n         * returned in an array.\n         *\n         * Uses {@link ARIA.asRef} and {@link ARIA.get}.\n         *\n         * Used in {@link ARIA.hasRef}\n         *\n         * @param  {Element}         element\n         *         Element whose references should be retrieved.\n         * @param  {String}          attribute\n         *         Attribute containing the references.\n         * @return {Array.<Element>}\n         *         Array containing the elements referenced. If the element\n         *         cannot be found, null will be in its place.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-controls=\"two three\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.getRef(element, \"controls\"); // -> [<div id=\"two\">, null]\n         *\n         * @example <caption>Duplicated referneced are discarded</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-controls=\"two three two\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.getRef(element, \"controls\"); // -> [<div id=\"two\">, null]\n         */\n        getRef: function getRef(element, attribute) {\n            return ARIA.asRef(ARIA.get(element, attribute));\n        },\n\n\n        /**\n         * Gets the state value of teh given attribute of the given element. The\n         * attribute name is normalised (see {@link ARIA.normalise}).\n         *\n         * Uses {@link ARIA.asState} and {@link ARIA.get}\n         *\n         * @param  {Element} element\n         *         Element whose state should be returned.\n         * @param  {String}  attribute\n         *         Attribute to get.\n         * @return {Bolean|String}\n         *         State.\n         *\n         * @example <caption>Recognised values</caption>\n         * // Assuming markup is\n         * // <div id=\"one\"\n         * //     aria-busy=\"true\" aria-checked=\"mixed\" aria-disabled=\"false\"\n         * // ></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.getState(div, \"busy\"); // -> true\n         * ARIA.getState(div, \"checked\"); // -> \"mixed\"\n         * ARIA.getState(div, \"disabled\"); // -> false\n         *\n         * @example <caption>Missing attributes and other values are false</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-label=\"abc\" aria-checked=\"  true  \">\n         * var div = document.getElementById(\"one\");\n         * ARIA.getState(div, \"busy\"); // -> false\n         * ARIA.getState(div, \"label\"); // -> false\n         * ARIA.getState(div, \"checked\"); // -> false\n         */\n        getState: function getState(element, attribute) {\n            return ARIA.asState(ARIA.get(element, attribute));\n        },\n\n\n        /**\n         * Checks to see if the given element has the attribute. The attribute\n         * is normalised (see {@link ARIA.normalise}) before being checked.\n         *\n         * Uses {@link ARIA.hasDOMAttribute} and {@link ARIA.normalise}.\n         *\n         * Used in {@link ARIA.hasRef}\n         *\n         * @param  {Element} element\n         *         Element whose attribute should be checked.\n         * @param  {String}  attribute\n         *         Attribute that should be checked.\n         * @return {Boolean}\n         *         true if the element has the attribute, false otherwise.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.has(div, \"busy\"); // -> true\n         * ARIA.has(div, \"checked\"); // -> false\n         */\n        has: function has(element, attribute) {\n            return ARIA.hasDOMAttribute(element, ARIA.normalise(attribute));\n        },\n\n\n        /**\n         * Checks to see that the given element has all the references defined\n         * in the given attribute. This function will return false if one of\n         * the references does not exist even if other ones do. The attribute is\n         * normalised before being checked (see {@link ARIA.normalise}). This\n         * function will return false if the attribute is not set.\n         *\n         * Uses {@link ARIA.has} and {@link ARIA.getRef} and\n         *\n         * @param  {Element} element\n         *         Element whose references should be checked.\n         * @param  {String}  attribute\n         *         Attribute containing the reference(s).\n         * @return {Boolean}\n         *         true if all references exist, false otherwise.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"a\" aria-labelledby=\"b\" aria-controls=\"b c\"></div>\n         * // <div id=\"b\"></div>\n         * var div = document.getElementById(\"a\");\n         * ARIA.hasRef(div, \"labelledby\"); // -> true\n         * ARIA.hasRef(div, \"controls\"); // -> false\n         * ARIA.hasRef(div, \"describedby\"); // -> false\n         */\n        hasRef: function hasRef(element, attribute) {\n\n            return ARIA.has(element, attribute) && !ARIA.getRef(element, attribute).includes(null);\n        },\n\n\n        /**\n         * Either removes the attribute from the given element or removes a part\n         * of the attribute. Attributes can be removed/modified one at a time by\n         * passing a string as the attribute parameter or multiple can be\n         * manipulated by passing an object (to remove the entire attribute\n         * when passing an object, set the value to null or undefined).\n         *\n         * The value can be a {@link ARIA~callback} and the returned value from\n         * this callback will be treated as if it has been passed to the\n         * function originally.\n         *\n         * When removing part of the attribute, if the attribute value becomes\n         * blank then the attribute will be removed.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.normalise},\n         * {@link ARIA.List}, {@link ARIA.asArray}, {@link ARIA.asString},\n         * {@link ARIA.removeDOMAttribute}, {@link ARIA.getDOMAttribute}, and\n         * {@link ARIA.setDOMAttribute}\n         *\n         * @param {Element}       element\n         *        Element to modify.\n         * @param {Object|String} attribute\n         *        Either the string of the attribute to remove/modify or an\n         *        object of attributes to values.\n         * @param {Array.<Element>|Boolean|Element|NodeList|String|ARIA~callback} [value]\n         *        Value of the attribute to remove/modify. Only necessary if the\n         *        attribute parameter is a string.\n         *\n         * @example <caption>Removing the attribute</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * var div = document.getElementById(\"div\");\n         * // All of these will remove the attribute\n         * ARIA.remove(div, \"controls\");\n         * ARIA.remove(div, \"controls\", undefined);\n         * ARIA.remove(div, \"controls\", null);\n         * ARIA.remove(div, \"controls\", function () {\n         *     return undefined;\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     return null;\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     // not returning is the same as returning undefined\n         * });\n         * ARIA.remove(div, {\n         *     controls: undefined\n         * });\n         * ARIA.remove(div, {\n         *     controls: null\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *         return undefined;\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *         return null;\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *         // not returning is the same as returning undefined\n         *     }\n         * });\n         * // Removing all values will remove the attribute\n         * ARIA.remove(div, \"controls\", \"two\");\n         * ARIA.remove(div, \"controls\", document.getElementById(\"two\"));\n         * ARIA.remove(div, \"controls\", function () {\n         *     return \"two\";\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     return document.getElementById(\"two\");\n         * });\n         * ARIA.remove(div, {\n         *     controls: \"two\"\n         * });\n         * ARIA.remove(div, {\n         *     controls: document.getElementById(\"two\")\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return \"two\";\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return document.getElementById(\"two\");\n         *     }\n         * });\n         * // In each of these cases, the markup will now be.\n         * // <div id=\"one\"></div>\n         *\n         * @example <caption>Removing part of the attribute</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-controls=\"two three\"></div>\n         * var div = document.getElementById(\"one\");\n         * // Each of these have the same effect.\n         * ARIA.remove(div, \"controls\", \"two\");\n         * ARIA.remove(div, \"controls\", document.getElementById(\"two\"));\n         * ARIA.remove(div, \"controls\", function () {\n         *     return \"two\";\n         * });\n         * ARIA.remove(div, \"controls\", function () {\n         *     return document.getElementById(\"two\");\n         * });\n         * ARIA.remove(div, {\n         *     controls: \"two\"\n         * });\n         * ARIA.remove(div, {\n         *     controls: document.getElementById(\"two\")\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return \"two\";\n         *     }\n         * });\n         * ARIA.remove(div, {\n         *     controls: function () {\n         *        return document.getElementById(\"two\");\n         *     }\n         * });\n         * // In each of these cases, the markup will now be.\n         * // <div id=\"one\" aria-controls=\"three\"></div>\n         */\n        remove: function remove(element, attribute, value) {\n\n            if (ARIA.isObjectLike(attribute)) {\n\n                Object.entries(attribute).forEach(function (_ref5) {\n                    var _ref6 = _slicedToArray(_ref5, 2),\n                        attr = _ref6[0],\n                        val = _ref6[1];\n\n                    return remove(element, attr, val);\n                });\n            } else {\n\n                var normalised = ARIA.normalise(attribute);\n\n                if (value === null || value === undefined) {\n                    ARIA.removeDOMAttribute(element, normalised);\n                } else {\n\n                    var current = ARIA.getDOMAttribute(element, normalised);\n\n                    if (typeof value === \"function\") {\n\n                        remove(element, normalised, value(element, current, normalised));\n                    } else {\n\n                        var list = new ARIA.List(current);\n                        var values = ARIA.asArray(value).map(ARIA.asString);\n\n                        list.delete.apply(list, _toConsumableArray(values));\n\n                        if (list.size) {\n                            ARIA.setDOMAttribute(element, normalised, list);\n                        } else {\n                            ARIA.removeDOMAttribute(element, normalised);\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n         * Adds a value to the given WAI-ARIA attribute for the given element.\n         * If the element does not have the attribute, it is created. If the\n         * value is a function, the result is added to the attribute. Attributes\n         * can be either created/modified individually by passing a string as\n         * the attribute parameter or mutliple can be set at once by passing an\n         * object. Any duplicated values wil be ignored so you will not be able\n         * to add a value that is already in the value.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.normalise},\n         * {@link ARIA.getDOMAttribute}, {@link ARIA.List},\n         * {@link ARIA.asArray}, {@link ARIA.asString} and\n         * {@link ARIA.setDOMAttribute}.\n         *\n         * @param {Element}       element\n         *        Element to modify.\n         * @param {Object|String} attribute\n         *        Either the string of the attribute to create/modify or an\n         *        object of attributes to values.\n         * @param {Array.<Element>|Boolean|Element|NodeList|String|ARIA~callback} [value]\n         *        Value of the attribute to create/modify. Only necessary if the\n         *        attribute parameter is a string.\n         *\n         * @example <caption>Creating/adding to an attribute</caption>\n         * // Assuming markup is\n         * // <div id=\"a\"></div>\n         * // <div id=\"d\"></div>\n         * // <div id=\"g\"></div>\n         * var divA = document.getElementById(\"a\");\n         * var divD = document.getElementById(\"d\");\n         * var divG = document.getElementById(\"g\");\n         * ARIA.add(divA, \"controls\", \"b\");\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b\"></div>\n         * ARIA.add(divA, \"controls\", function () { return \"c\"; });\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c\"></div>\n         * ARIA.add(divA, \"controls\", divD);\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d\"></div>\n         * ARIA.add(divA, {controls: \"e\"});\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d e\"></div>\n         * ARIA.add(divA, {controls: function () { return \"f\"; }});\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d e f\"></div>\n         * ARIA.add(divA, {controls: function () { return divG; }});\n         * // Now div \"a\" is\n         * // <div id=\"a\" aria-controls=\"b c d e f g\"></div>\n         *\n         * @example <caption>Duplicate values are ignored</caption>\n         * // Assuming markup is\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * // <div id=\"two\"></div>\n         * var div1 = document.getElementById(\"one\");\n         * var div2 = document.getElementById(\"two\");\n         * ARIA.add(div1, \"controls\", \"two\");\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, \"controls\", function () { return \"two\"; });\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, \"controls\", div2);\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, \"controls\", function () { return div2; });\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: \"two\"});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: function () { return \"two\"; }});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: div2});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         * ARIA.add(div1, {controls: function () { return div2; }});\n         * // Div \"one\" is still\n         * // <div id=\"one\" aria-controls=\"two\"></div>\n         */\n        add: function add(element, attribute, value) {\n\n            if (ARIA.isObjectLike(attribute)) {\n\n                Object.entries(attribute).forEach(function (_ref7) {\n                    var _ref8 = _slicedToArray(_ref7, 2),\n                        attr = _ref8[0],\n                        val = _ref8[1];\n\n                    return add(element, attr, val);\n                });\n            } else {\n\n                var attr = ARIA.normalise(attribute);\n                var current = ARIA.getDOMAttribute(element, attr);\n\n                if (typeof value === \"function\") {\n                    value = value(element, current, attr);\n                }\n\n                var list = new ARIA.List(current);\n                var values = ARIA.asArray(value).map(ARIA.asString);\n\n                list.add.apply(list, _toConsumableArray(values));\n                ARIA.setDOMAttribute(element, attr, list);\n            }\n        }\n\n    });\n\n    ARIA.extend( /** @lends ARIA */{\n\n        /**\n         * Sets the role of the given element.\n         *\n         * Uses {@link ARIA.setDOMAttribute}\n         *\n         * @param {Element} element\n         *        Element whose role should be set.\n         * @param {String}  role\n         *        Value of the role to set.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.setRole(div, \"tablist\");\n         * // Now markup is\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * ARIA.setRole(div, \"presentation\");\n         * // Now markup is\n         * // <div id=\"one\" role=\"presentation\"></div>\n         */\n        setRole: function setRole(element, role) {\n            ARIA.setDOMAttribute(element, \"role\", role);\n        },\n\n\n        /**\n         * Gets the role of the given element.\n         *\n         * Uses {@link ARIA.getDOMAttribute}\n         *\n         * Used by {@link ARIA.hasRole}, {@link ARIA.addRole} and\n         * {@link ARIA.removeRole}\n         *\n         * @param  {Element}     element\n         *         Element whose role should be returned.\n         * @return {String|null}\n         *         The value of the role or null if the element does not have a\n         *         role attribute.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.getRole(document.getElementById(\"one\")); // -> \"tablist\"\n         * ARIA.getRole(document.getElementById(\"two\")); // -> null\n         */\n        getRole: function getRole(element) {\n            return ARIA.getDOMAttribute(element, \"role\");\n        },\n\n\n        /**\n         * Checks to see if the given element has a role. If the role is\n         * defined, the check is to see whether or not the role contains the\n         * given value.\n         *\n         * Uses {@ARIA.hasDOMAttribute}, {@link ARIA.List} and {@ARIA.getRole}.\n         *\n         * @param  {Element}  element\n         *         Element to test.\n         * @param  {String}   [role]\n         *         Option role to check.\n         * @return {Boolean}\n         *         true if the element has a role (or the specific role), false\n         *         otherwise.\n         *\n         * @example <caption>Checking for a role</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.hasRole(document.getElementById(\"one\")); // -> true\n         * ARIA.hasRole(document.getElementById(\"two\")); // -> false\n         *\n         * @example <caption>Checking for a specific role</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.hasRole(div, \"tablist\"); // -> true\n         * ARIA.hasRole(div, \"tab\"); // -> false\n         * ARIA.hasRole(div, \"presentation\"); // -> false\n         */\n        hasRole: function hasRole(element, role) {\n\n            var has = ARIA.hasDOMAttribute(element, \"role\");\n\n            if (role && has) {\n\n                var list = new ARIA.List(ARIA.getRole(element));\n\n                has = list.has(role);\n            }\n\n            return has;\n        },\n\n\n        /**\n         * Adds one or more roles to the given element. If the element didn't\n         * have a role attribute before adding, the attribute is created.\n         *\n         * Uses {@link ARIA.List}, {@link ARIA.getRole} and\n         * {@link ARIA.setRole}.\n         *\n         * @param {Element}   element\n         *        Element whose role should be manipulated.\n         * @param {...String} roles\n         *        Roles to add.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"presentation\"></div>\n         * // <div id=\"two\"></div>\n         * var div1 = document.getElementById(\"one\");\n         * var div2 = document.getElementById(\"two\");\n         * ARIA.addRole(div1, \"tablist\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"presentation tablist\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.addRole(div1, \"image\", \"tab\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"presentation tablist image tab\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.addRole(div2, \"panel\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"presentation tablist image tab\"></div>\n         * // <div id=\"two\" role=\"panel\"></div>\n         *\n         * @example <caption>Roles are not duplicated</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.addRole(div, \"tablist\");\n         * // Markup is still:\n         * // <div id=\"one\" role=\"tablist\"></div>\n         * ARIA.addRole(div, \"tablist\", \"presentation\", \"tablist\");\n         * // Markup is now:\n         * // <div id=\"one\" role=\"tablist presentation\"></div>\n         */\n        addRole: function addRole(element) {\n\n            var list = new ARIA.List(ARIA.getRole(element));\n\n            for (var _len3 = arguments.length, roles = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                roles[_key3 - 1] = arguments[_key3];\n            }\n\n            list.add.apply(list, _toConsumableArray(roles));\n            ARIA.setRole(element, list);\n        },\n\n\n        /**\n         * Removes one or more roles from the given element. If no roles are\n         * defined or all roles are removed, the role attribute is removed.\n         *\n         * Uses {@link ARIA.List}, {@link ARIA.getRole}, {@link ARIA.setRole}\n         * and {@link ARIA.removeDOMAttribute}.\n         *\n         * @param {Element}   element\n         *        Element whose roles should be manipulated.\n         * @param {...String} [roles]\n         *        Optional roles to removed.\n         *\n         * @example <caption>Removing individual roles</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" role=\"image tab panel banner\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.removeRole(div, \"tab\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"image panel banner\"></div>\n         * ARIA.removeRole(div, \"banner\", \"image\");\n         * // Now markup is:\n         * // <div id=\"one\" role=\"panel\"></div>\n         *\n         * @example <caption>Removing the role attribute</caption>\n         * // Assuming markup is:\n         * <div id=\"one\" role=\"banner\"></div>\n         * <div id=\"two\" role=\"image\"></div>\n         * ARIA.removeRole(document.getElementById(\"one\"), \"banner\");\n         * // Assuming markup is:\n         * <div id=\"one\"></div>\n         * <div id=\"two\" role=\"image\"></div>\n         * ARIA.removeRole(document.getElementById(\"two\"));\n         * // Assuming markup is:\n         * <div id=\"one\"></div>\n         * <div id=\"two\"></div>\n         */\n        removeRole: function removeRole(element) {\n            for (var _len4 = arguments.length, roles = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                roles[_key4 - 1] = arguments[_key4];\n            }\n\n            if (roles.length) {\n\n                var list = new ARIA.List(ARIA.getRole(element));\n\n                list.delete.apply(list, roles);\n\n                if (list.size) {\n                    ARIA.setRole(element, list);\n                } else {\n                    removeRole(element);\n                }\n            } else {\n                ARIA.removeDOMAttribute(element, \"role\");\n            }\n        }\n\n    });\n\n    var focusable = [\"a[href]\", \"button\", \"iframe\", \"input:not([type=\\\"hidden\\\"]):not([type=\\\"file\\\"])\", \"select\", \"textarea\", \"[tabindex]\", \"[contentEditable=\\\"true\\\"]\"].map(function (sel) {\n        return sel + \":not([disabled]):not([hidden]):not([inert])\";\n    }).join(\",\");\n\n    ARIA.extendHidden( /** @lends ARIA */{\n\n        /**\n         * A wrapped for matching an element with a CSS selector.\n         *\n         * Used in {@link ARIA.makeFocusable}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element to test.\n         * @param   {String}   selector\n         *          CSS selector to match.\n         * @return  {Boolean}\n         *          true if the element matches, false otherwise.\n         *\n         * @example\n         * var div // -> <div id=\"one\">\n         * ARIA.is(div, \"div\"); // -> true\n         * ARIA.is(div, \"#one\"); // -> true\n         * ARIA.is(div, \"[id]\"); // -> true\n         * ARIA.is(div, \".class\"); // -> false\n         */\n        is: function is(element, selector) {\n            return element.matches(selector);\n        }\n    });\n\n    ARIA.extend( /** @lends ARIA */{\n\n        /**\n         * A CSS selector that matches elements which are already focusable.\n         *\n         * Used in {@link ARIA.makeFocusable}.\n         *\n         * @type {String}\n         */\n        focusable: focusable,\n\n        /**\n         * Makes the given element focusable. If the isTabbable flag is set to\n         * true then the element will be added to the tab order, if not then\n         * the element will only be programmatically focusable. This function\n         * will not affect any element that is already focusable (identified\n         * using the {@link ARIA.focusable} selector).\n         *\n         * Uses {@link ARIA.is} and {@link ARIA.focusable} and\n         * {@link ARIA.setDOMAttribute}.\n         *\n         * @param {Element} element\n         *        Element that should become focusable.\n         * @param {Boolean} [isTabbable=false]\n         *        true if the element should be added to the tab order.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * // <div id=\"two\"></div>\n         * var div1 = document.getElementById(\"one\");\n         * var div2 = document.getElementById(\"two\");\n         * ARIA.makeFocusable(div1);\n         * // Now markup is:\n         * // <div id=\"one\" tabindex=\"-1\"></div>\n         * // <div id=\"two\"></div>\n         * ARIA.makeFocusable(div2, true);\n         * // Now markup is:\n         * // <div id=\"one\" tabindex=\"-1\"></div>\n         * // <div id=\"two\" tabindex=\"0\"></div>\n         *\n         * @example <caption>No effect to already focusable elements</caption>\n         * // Assuming markup is:\n         * // <a href=\"#\" class=\".one\"></a>\n         * // <div tabindex=\"0\" class=\".one\"></div>\n         * // <button type=\"button\" class=\".one\"></button>\n         * // <input type=\"text\" class=\".one\">\n         * document.querySelectorAll(\".one\").forEach(function (element) {\n         *     ARIA.makeFocusable(element);\n         * });\n         * // Markup is still:\n         * // <a href=\"#\" class=\".one\"></a>\n         * // <div tabindex=\"0\" class=\".one\"></div>\n         * // <button type=\"button\" class=\".one\"></button>\n         * // <input type=\"text\" class=\".one\">\n         */\n        makeFocusable: function makeFocusable(element) {\n            var isTabbable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\n            if (!ARIA.is(element, ARIA.focusable)) {\n\n                ARIA.setDOMAttribute(element, \"tabindex\", isTabbable ? 0 : -1);\n            }\n        }\n    });\n\n    /**\n     * A helper function that chains together methods and can work with a\n     * collection of elements. This function aims to make working with the\n     * {@link ARIA} methods easier. The methods will manipulate the element(s)\n     * but they will not return anything that the methods would. For example,\n     * you can chain {@link ARIA.set} but you will not get anything back from\n     * {@link ARIA.get}.\n     *\n     * The chaining functions work by automatically passing the element as the\n     * first argument to the original {@link ARIA} method.\n     *\n     * Uses {@link ARIA.asArray}.\n     *\n     * @param  {Array.<Element>|Element} elements\n     *         Element or elements to manipulate.\n     * @return {Object}\n     *         Chain object.\n     *\n     * @example <caption>Working with an element</caption>\n     * // Assuming markup is:\n     * // <div id=\"one\"></div>\n     * ARIA.chain(document.getElementById(\"one\"))\n     *     .set({\n     *         busy: true,\n     *         label: \"abc\"\n     *     })\n     *     .makeFocusable()\n     * // Now markup is:\n     * // <div id=\"one\" aria-busy=\"true\" aria-label=\"abc\" tabindex=\"-1\"></div>\n     *\n     * @example <caption>Working with multiple elements</caption>\n     * // Assuming markup is:\n     * // <div id=\"one\"></div>\n     * // <div class=\"thing\"></div>\n     * // <div class=\"thing\"></div>\n     * ARIA.chain(document.querySelectorAll(\".thing\"))\n     *     .identify()\n     *     .set(\"labelledby\", document.getElementById(\"one\"));\n     * // Now markup is\n     * // <div id=\"one\"></div>\n     * // <div class=\"thing\" id=\"anonymous-element-0\" aria-labelledby=\"one\"></div>\n     * // <div class=\"thing\" id=\"anonymous-element-1\" aria-labelledby=\"one\"></div>\n     */\n    ARIA.chain = function (elements) {\n\n        return new Proxy(ARIA, {\n\n            get: function get(target, name) {\n\n                return typeof target[name] === \"function\" ? function () {\n                    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                        args[_key5] = arguments[_key5];\n                    }\n\n                    ARIA.asArray(elements).forEach(function (element) {\n                        target[name].apply(target, [element].concat(args));\n                    });\n\n                    return this;\n                } : target[name];\n            }\n\n        });\n    };\n\n    ARIA.extendHidden( /** @lends ARIA */{\n\n        /**\n         * The WeakMap used to store the MutationObserver that makes the events\n         * work.\n         *\n         * Used in {@link ARIA.startListening} and {@link ARIA.stopListening}.\n         *\n         * @private\n         * @type    {WeakMap}\n         */\n        observerStore: new WeakMap(),\n\n        /**\n         * A wrapper for adding an event listener to an element. The event is\n         * always bound in the bubbling phase. The event object is passed to the\n         * hander. This function enables a developer to replace this function if\n         * they want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used in {@link ARIA.on}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element that should gain the event listener.\n         * @param   {String}   event\n         *          Name of the event to bind.\n         * @param   {Function} handler\n         *          Handler for the event listener.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.addEventListener(one, \"click\", function (event) {\n         *     console.log(\"hi\");\n         * });\n         * // Event listener is now bound.\n         */\n        addEventListener: function addEventListener(element, event, handler) {\n            element.addEventListener(event, handler);\n        },\n\n\n        /**\n         * A wrapper for removing an event listener from an element. The event\n         * listener is always in the bubbling phase. This function enables a\n         * developer to replace this function if they want {@link ARIA} to work\n         * with a virtual DOM.\n         *\n         * Used in {@link ARIA.off}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element whose event handler sound be removed.\n         * @param   {String}   event\n         *          Name of the event.\n         * @param   {Function} handler\n         *          Function to remove.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler = function () {\n         *     console.log(\"hi\");\n         * };\n         * ARIA.addEventListener(one, \"click\", handler);\n         * // Event listener is now bound.\n         * ARIA.removeEventListener(one, \"click\", handler);\n         * // Event listener is now un-bound.\n         */\n        removeEventListener: function removeEventListener(element, event, handler) {\n            element.removeEventListener(event, handler);\n        },\n\n\n        /**\n         * A wrapper for dispatching an event on an element. The dispatched\n         * event always bubbles. This function enables a developer to replace\n         * this function if they want {@link ARIA} to work with a virtual DOM.\n         *\n         * Used in {@link ARIA.startListening}.\n         *\n         * @private\n         * @param   {Element} element\n         *          Element that should have an event dispatched.\n         * @param   {String}  event\n         *          Name of the vent to dispatch.\n         * @param   {Object}  [detail={}]\n         *          Optional information for the event.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * div.addEventListener(\"test\", function () {\n         *     console.log(\"hi\");\n         * });\n         * ARIA.dispatchEvent(div, \"test\"); // logs: \"hi\"\n         *\n         * @example <caption>Padding information to the handler</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * div.addEventListener(\"test\", function (e) {\n         *     console.log(e.detail.data);\n         * });\n         * ARIA.dispatchEvent(div, \"test\" {data: \"abc\"}); // logs: \"abc\"\n         */\n        dispatchEvent: function dispatchEvent(element, event) {\n            var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\n            element.dispatchEvent(new CustomEvent(event, {\n                bubbles: true,\n                cancelable: true,\n                detail: detail\n            }));\n        },\n\n\n        /**\n         * Creates the function that will handle the mutations detected by a\n         * MutationObserver listening to the given element.\n         *\n         * Uses {@link ARIA.handleMutation}.\n         *\n         * Used in {@link ARIA.startListening}.\n         *\n         * @private\n         * @param   {Element}  element\n         *          Element that has the MutationObserver listening for changes.\n         * @return  {Function}\n         *          Function that will handle mutations.\n         */\n        createMutationHandler: function createMutationHandler(element) {\n\n            return function (mutationList) {\n                mutationList.forEach(ARIA.handleMutation, element);\n            };\n        },\n\n\n        /**\n         * Checks to see whether the mutation was aa WAI-ARIA attribute and\n         * whether the value has actually changed before dispatching an event on\n         * the element bound as the function's context.\n         *\n         * Uses {@link ARIA.dispatchEvent}, {@link ARIA.makeEventName} and\n         * {@link ARIA.getDOMAttribute}.\n         *\n         * Used in {@link ARIA.createMutationHandler}.\n         *\n         * @private\n         * @this    {Element}\n         *          Element upon which the mutations were heard.\n         * @param   {MutationRecord} mutation\n         *          Object with information about the mutation.\n         */\n        handleMutation: function handleMutation(mutation) {\n            var type = mutation.type,\n                attributeName = mutation.attributeName,\n                oldValue = mutation.oldValue;\n\n            var element = this;\n\n            if (type === \"attributes\" && attributeName.startsWith(\"aria-\")) {\n\n                var value = ARIA.getDOMAttribute(element, attributeName);\n\n                if (value !== oldValue) {\n\n                    var event = ARIA.makeEventName(attributeName);\n\n                    ARIA.dispatchEvent(element, event, {\n                        attributeName: attributeName,\n                        value: value,\n                        oldValue: oldValue\n                    });\n                }\n            }\n        }\n    });\n\n    ARIA.extend( /** @lends ARIA */{\n\n        eventNamePrefix: \"wai-aria__\",\n\n        /**\n         * Creates the event name from the given attribute. The event is\n         * normalised (see {@link ARIA.normalise}) and prefixed with\n         * {@link ARIA.eventNamePrefix}.\n         *\n         * Uses {@link ARIA.eventNamePrefix} and {@link ARIA.normalise}.\n         *\n         * @param {String} attribute\n         *        Attribute to convert into an event name.\n         *\n         * @example\n         * ARIA.makeEventName(\"busy\"); // -> \"wai-aria__aria-busy\"\n         * ARIA.makeEventName(\"aria-checked\"); // -> \"wai-aria__aria-checked\"\n         */\n        makeEventName: function makeEventName(attribute) {\n            return ARIA.eventNamePrefix + ARIA.normalise(attribute);\n        },\n\n\n        /**\n         * Starts listening to WAI-ARIA attribute changes and dispatching an\n         * event when a change occurs. Listening occurs through a\n         * MutationObserver which is stored on the element using\n         * {@link ARIA.observer}. If the element is already listening for\n         * attribute changes, no action is taken. The MutationObserver can be\n         * disconnected using {@link ARIA.stopListening}.\n         *\n         * Uses {@link ARIA.observerStore}, {@link ARIA.createMutationHandler}.\n         *\n         * Used in {@link ARIA.on}.\n         *\n         * @param {Element} element\n         *        Element whose WAI-ARIA attribute changes should be listened\n         *        for.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.startListening(div);\n         * div[ARIA.observer]; // -> MutationObserver\n         */\n        startListening: function startListening(element) {\n\n            var store = ARIA.observerStore;\n\n            if (!store.has(element)) {\n\n                var observer = new MutationObserver(ARIA.createMutationHandler(element));\n\n                observer.observe(element, {\n                    attributes: true,\n                    attributeOldValue: true\n                });\n\n                store.set(element, observer);\n            }\n        },\n\n\n        /**\n         * Disconnects the MutationObserver added in {@link ARIA.startListening}\n         * and removes it from the given element (if it was there in the first\n         * place). This function isn't called in the {@link ARIA} library but it\n         * may be useful for unloading elements.\n         *\n         * Uses {@link ARIA.observerStore}.\n         *\n         * @param {Element} element\n         *        Element whose MutationObserver should disconnect and be\n         *        removed.\n         *\n         * @example\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.startListening(div);\n         * div[ARIA.observer]; // -> MutationObserver\n         * ARIA.stopListening(div);\n         * div[ARIA.observer]; // -> undefined\n         */\n        stopListening: function stopListening(element) {\n\n            var store = ARIA.observerStore;\n            var observer = store.get(element);\n\n            if (observer) {\n\n                observer.disconnect();\n                store.delete(element);\n            }\n        },\n\n\n        /**\n         * Adds one or more event listeners to an element. The event listeners\n         * listen for changes to WAI-ARIA attributes and the role attribute.\n         * This function will only work if the changes on the element are being\n         * listened to so this function will automatically call\n         * {@link ARIA.startListening}. Calling {@link ARIA.stopListening} on\n         * the element will prevent the event handlers from executing.\n         *\n         * To remove an event listener, use {@link ARIA.off}.\n         *\n         * Uses {@link ARIA.isObjectLike}, {@link ARIA.List},\n         * {@link ARIA.makeEventName} and {@link ARIA.addEventListener}.\n         *\n         * @param {Element}                      element\n         *        Element to bind listeners.\n         * @param {Array.<String>|Object|String} attributes\n         *        Either an object of attributes to handlers, an array of\n         *        attributes or a string of space-separated attributes.\n         * @param {Function}                     [handler]\n         *        Handler to execute when the attribute changes. This is only\n         *        required if the attributes parameters is not an object.\n         *\n         * @example <caption>Listening for one attribute change</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.on(div, \"busy\", function (e) {\n         *     console.log(\n         *         \"'%s' changed from '%s' to '%s'\",\n         *         e.detail.attributeName,\n         *         e.detail.oldValue,\n         *         e.detail.value\n         *     );\n         * });\n         * ARIA.set(div, \"busy\", false);\n         * // Logs \"'aria-busy' changed from 'true' to 'false'\"\n         *\n         * @example <caption>Listening for multiple attribute changes</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\" aria-checked=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * // You can use either an array of strings ...\n         * ARIA.on(div, [\"busy\", \"checked\"], function (e) {\n         *     console.log(\"'%s' changed\", e.detail.attributeName);\n         * });\n         * // ... or a space-separated string.\n         * ARIA.on(div, \"busy checked\", function () {\n         *     console.log(\"'%s' changed\", e.detail.attributeName);\n         * });\n         * ARIA.set(div, \"busy\", false);\n         * // Logs \"'aria-busy' changed\"\n         * ARIA.set(div, \"checked\", false);\n         * // Logs \"'aria-checked' changed\"\n         *\n         * @example <caption>Multiple events and handlers</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\" aria-busy=\"true\" aria-checked=\"true\"></div>\n         * var div = document.getElementById(\"one\");\n         * ARIA.on(div, {\n         *     busy: function (e) {\n         *         console.log(\"'%s' changed (1)\", e.detail.attributeName);\n         *     },\n         *     checked: function (e) {\n         *         console.log(\"'%s' changed (2)\", e.detail.attributeName);\n         *     }\n         * });\n         * ARIA.set(div, \"busy\", false);\n         * // Logs \"'aria-busy' changed (1)\"\n         * ARIA.set(div, \"checked\", false);\n         * // Logs \"'aria-checked' changed (2)\"\n         */\n        on: function on(element, attributes, handler) {\n\n            if (ARIA.isObjectLike(attributes)) {\n\n                Object.entries(attributes).forEach(function (_ref9) {\n                    var _ref10 = _slicedToArray(_ref9, 2),\n                        attr = _ref10[0],\n                        func = _ref10[1];\n\n                    return on(element, attr, func);\n                });\n            } else {\n\n                var list = new ARIA.List(attributes);\n\n                ARIA.startListening(element);\n                list.toArray(ARIA.makeEventName).forEach(function (event) {\n                    ARIA.addEventListener(element, event, handler);\n                });\n            }\n        },\n\n        /**\n         * Removes an event listener from the given element. The event listener\n         * would have been triggered if a WAI-ARIA attribute changed.\n         *\n         * Used {@link ARIA.List}, {@link ARIA.makeEventName} and\n         * {@link ARIA.removeEventListener}.\n         *\n         * @param {Element}                      element\n         *        Element from which the event handler should be removed.\n         * @param {Array.<String>|Object|String} attributes\n         *        Either an array of attributes, a space-separated string of\n         *        attributes or an object of attributes to functions.\n         * @param {Function}                     [handler]\n         *        Function to remove.\n         *\n         * @example <caption>Removing a single handler</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler = function () {\n         *     // ...\n         * };\n         * // ...\n         * ARIA.off(div, \"busy\", handler);\n         *\n         * @example <caption>Removing a handler from multiple attributes</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler = function () {\n         *     // ...\n         * };\n         * // ...\n         * // Either:\n         * ARIA.off(div, [\"busy\", \"checked\"], handler);\n         * // Or:\n         * ARIA.off(div, \"busy checked\", handler);\n         *\n         * @example <caption>Removing multiple handlers</caption>\n         * // Assuming markup is:\n         * // <div id=\"one\"></div>\n         * var div = document.getElementById(\"one\");\n         * var handler1 = function () {\n         *     // ...\n         * };\n         * var handler2 = function () {\n         *     // ...\n         * };\n         * // ...\n         * ARIA.off(div, {\n         *     busy: handler1,\n         *     checked: handler2\n         * });\n         */\n        off: function off(element, attributes, handler) {\n\n            if (ARIA.isObjectLike(attributes)) {\n\n                Object.entries(attributes).forEach(function (_ref11) {\n                    var _ref12 = _slicedToArray(_ref11, 2),\n                        attr = _ref12[0],\n                        func = _ref12[1];\n\n                    return off(element, attr, func);\n                });\n            } else {\n\n                var list = new ARIA.List(attributes);\n\n                list.toArray(ARIA.makeEventName).forEach(function (event) {\n                    ARIA.removeEventListener(element, event, handler);\n                });\n            }\n        }\n\n    });\n})(window);\n//# sourceMappingURL=aria.js.map"],"file":"aria.es5.min.js"}